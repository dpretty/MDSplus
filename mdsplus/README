Prototype MDSplus python based expression evaluator

This package is a prototype replacement for the C implementation of the MDSplus
expression evaluator currently found in libTdiShr. The intent is to maintain
compatibility with the existing MDSplus data structures including those which
represent compiled TDI expressions. There will be a python class representation
of all of the MDSplus data types currently supported today. Eventually this
package will include a tdi compiler which will compile the tdi language into
a python class representation. A library with entry points such as TdiCompile,
TdiExecute and TdiData which will call into Python will eventually be provided.

To INSTALL this package simply execute the following command while in this
directory using an account with suitable privileges to install the package into
your Python distribution:

$ python setup.py install

Prerequisits:

You must have MDSplus installed in /usr/local/mdsplus.
You will need to install the numpy Python package if it is not currently
installed on your system. To test if numpy is installed simply:

$ python
>>> from numpy import *

Once you have this package installed you can try a few operations which are
currently implemented:

$ python
>>> from MDSplus import *
>>> TreeOpen('tree-name',shot)
>>> noderef=TreeFindNode('node-path')
>>> print noderef
>>> print noderef.evaluate()
>>> sig=TreeFindNode('a-signal').evaluate()
>>> print sig
>>> print dim_of(sig)
>>> print value_of(sig)
Now for a really complicated one:
>>> sig=build_signal(compile_function('add',42,compile_function('$value')),
                   compile_function('build_range',0,1000),None)
>>> print sig
>>> print value_of(sig)
>>> print data(sig)

Only a very few of the functions are actually implemented. This is currently simply
a proof of principle.
