#!/bin/sh
#
#
# Manage MDSplus rpm packaging
#
# Usage: pkg mode options
#        mode == add remove list
#
# Modes:
#
# add: Add module to a rpm subpackage
#
#   Usage:    pkg add module-name package-name [-R]
#   examples: pkg add TreeAddNode.c kernel
#             pkg add treeshr/* kernel
#
# remove: Remove module from an rpm subpackage
#
#   Usage:    pkg remove module-name package-name [-R]
#   examples: pkg remove TreeAddNode.c kernel
#             pkg remove treeshr/* kernel
#
# list:   List modules in an rpm subpackage
#
#   Usage:    pkg list package-name
#   examples: pkg list kernel
#             pkg list NONE  (lists all modules not in any package)
#             pkg list ALL   (lists all modules and the package(s) they are in)
#
# get_release: Get current rpm release of an rpm subpackage
#
#   Usage:    pkg get_release package-name flavor
#   examples: pkg get_release camac stable
#             pkgrel-stable-3-0-2-el5
#
# check_release: Check to see if rpm is up to date
#
#   Usage:    pkg check_release package-name flavor
#   examples: pkg check_release camac stable
#             tdi/camac/CamXandQ.fun current stable revision is 1.1 while rpm revision is 1.2
#       Returns the string "ok" if up to date otherwise lists module revisions not in latest rpm
#
list_none()
{
  awk '/Repository revision/ {F=substr($4,24,length($4)-25);PKG="";} /pkg_/ {PKG=substr($1,5) " "} /====/ {if (length(F) > 0 && length(PKG) == 0) print F; F=""}' $1 | sort
}

list_all()
{
  awk '/Repository revision/ {F=substr($4,24,length($4)-25);PKG=""} /pkg_/ {PKG=PKG substr($1,5) " "} /====/ {if (length(F) > 0 ) { if (length(PKG) == 0) PKG="None"; print F "   " PKG}; F=""}' $1 | sort
}

list_pkg()
{
  awk '/Repository revision/ {F=substr($4,24,length($4)-25)} /pkg_'$2'/ {print F}' $1 | sort
}

update_mdsplus()
{
  if [ -d mdsplus ]
  then
    cd mdsplus
    cvs -Q update -d -r $1 -f >/dev/null
    cd ..
  else
    cvs -d :ext:`whoami`@www.mdsplus.org:/mdsplus/repos -Q checkout -r $1 -f mdsplus >/dev/null
  fi
}

case $1 in
  "")
  cat - <<EOF
Usage: $0 pgkadd <module or directory (no wildcards)> <package-name>

          Assigns package dependency to a module or directory tree of modules.

       $0 pkgremove <module or directory (no wildcards)> <package-name>

          Remove package dpendency to a module or directory tree of modules.

       $0 list

          Generates a module package summary in html format.

       $0 list none

          Generates a list of modules that currently do not have a package depency
          assigned.

       $0 list <package-name>

          Generate a list of modules that updates to the package depend on.

       $0 list all

          Generate a module package summary in text format.
      
EOF
  ;;
  pkgadd)
    if [ ! -r `dirname $0`/../rpm/subpackages/$3 ]
    then
      echo Package $3 does not exist
      exit
    fi
    for mod in `find $2`
    do
      pushd `dirname $mod` >/dev/null
      m=$(basename $mod)
      if [ ! -d $m ]
      then
        if ( cvs status $m 2>/dev/null | grep /mdsplus/repos > /dev/null )
        then
          echo "Adding `pwd`/$m to package $3"
          cvs -Q tag -F pkg_$3 $m
        fi
      fi
      popd > /dev/null
    done
  ;;
  pkgremove)
    if [ ! -r `dirname $0`/../rpm/subpackages/$3 ]
    then
      echo Package $3 does not exist
      exit
    fi
    for mod in `find $2`
    do
      pushd `dirname $mod` >/dev/null
      m=$(basename $mod)
      if [ ! -d $m ]
      then
        if ( cvs status $m 2>/dev/null | grep -v Attic | grep /mdsplus/repos > /dev/null )
        then
          echo "Removing `pwd`/$m from package $3"
          cvs -Q tag -d pkg_$3 $m
        fi
      fi
      popd > /dev/null
    done
  ;;
  list)
    case $2 in
    none)
       if [ -z "$3" ]
       then
         tmpstatus=$(mktemp)
         $0 get_cvs_status > $tmpstatus
         list_none $tmpstatus
         rm -f $tmpstatus
       else
         list_none $3
       fi
    ;;
    all)
       if [ -z "$3" ]
       then
         tmpstatus=$(mktemp)
         $0 get_cvs_status > $tmpstatus
         list_all $tmpstatus
         rm -f $tmpstatus
       else
         list_all $3
       fi
    ;;
    "")
       if [ -z "$3" ]
       then
         tmpstatus=$(mktemp)
         $0 get_cvs_status > $tmpstatus
         clean="yes"
       else
         tmpstatus=$3
         clean="no"
       fi
       echo "<head><title>MDSplus Packaging Information - Sources</title></head>"
       echo "<h2>Modules sorted by module name</h2>"
       echo "<table border=\"1\"><tr><td><b>Module</b></td><td><b>Package(s)</b></td></tr>"
       awk '/Repository revision/ {F=substr($4,24,length($4)-25);PKG=""} /pkg_/ {PKG=PKG substr($1,5) "<br/>"} /====/ {if (length(F) > 0 ) { if (length(PKG) == 0) PKG="None"; print "<tr><td>" F "</td><td><a href=\"#" PKG "\">" PKG "</a></td></tr>"}; F=""}' $tmpstatus | sort
       echo "</table>"
       echo "<h2>Modules sorted by package name</hd>"
       echo "<table border=\"1\"><tr><td><b>Package</b></td><td><b>Module(s)</b></td></tr>"
       awk '/Repository revision/ {F=substr($4,24,length($4)-25);PKG=""} /pkg_/ {PKG=substr($1,5)} /====/ {if (length(F) > 0) { if (length(PKG) == 0) PKG="None"; print "<tr><td><a href=\"#" PKG "\">" PKG "</a></td><td>" F "</td></tr>"}; F=""}' $tmpstatus | sort
       echo "</table>"
       if [ "$clean" == "yes" ]
       then
         rm -f $tmpstatus
       fi
       pkgdir=$(dirname $0)
       pushd ${pkgdir}/..
       for pkg in rpm/subpackages/*
       do
         pkgname=$(basename $pkg)
         if [ "$pkgname" == "CVS" ]
         then
           continue
         fi
         size=$(ls -l $pkg | awk '{print $5}')
         echo "<a name=\"$pkgname\"><h2>$pkgname</h2></a></br>"
	 if [ $size -eq 0 ]
         then
           echo "Not currently packaged"
         else
           echo "<pre>"
	   cat $pkg
	   echo "</pre>"
	 fi
       done
    ;;
    *)
       if [ -r $(dirname $0)/../rpm/subpackages/$2 ]
       then
         if [ -z "$3" ]
         then
           tmpstatus=$(mktemp)
           $0 get_cvs_status > $tmpstatus
	   list_pkg $tmpstatus $2
	   rm -f $tmpstatus
         else
           list_pkg $3 $2
         fi
       else
         echo "No such package /$2/"
       fi
    ;;
    esac
  ;;
  get_cvs_status) #internal use
    dirn=$(dirname $0)
    cd $dirn/..
    cvs -q status -Rv 2>/dev/null
  ;;
  get_dist) #internal use
    rpmbuild -E '%dist' 2>/dev/null
  ;;
  get_version) #internal use
    # pkg get_version flavor
    if [ -z "$3" ]
    then
       file=$(mktemp)
       $0 get_cvs_status > $file
       keep=""
    else
       file=$3
       keep="yes"
    fi
    awk '/release.h,v/ {V="yes"} /pkgver-'$2'/ {if (V=="yes"){A[0]="";split($1,A,"-");print A[3] "." A[4];exit;}}' $file
    if [ -z "$keep" ]
    then
      rm -f $file
    fi
  ;;
  get_release)
    # pkg get_release package-name flavor [cvs status filename]
    # prints current release for a package release for the specified flavor and platform distribution
    # rpm/subpackages/package-name will normally have a tag: pkgrel-flavor-versionMajor-versionMinor-release-platform
    # for example: pkgrel-stable-3-0-2-rhel5
    # this is used to identify the release number for the current version and platform
    if [ -z "$4" ]
    then
       file=$(mktemp)
       $0 get_cvs_status > $file
       keep=""
    else
       file=$4
       keep="yes"
    fi
    version=$($0 get_version $3 $file)
    version=$(echo $version | awk '{v[0]=split($1,v,".");print v[1] "-" v[2]}')
    dist=$($0 get_dist)
    dist=$(echo $dist | awk '{d[0]=split($1,d,".");print d[2]}')
    release=$(awk '/subpackages\/'$2'/ {R="yes"} /pkgrel-'$3'-'$version'-[[:digit:]]-'$dist'/ {if (R=="yes") {print $1;exit;}} /====/ {R="no"}' $file)
    if [ -z "$release" ]
    then
      release="0"
    fi 
    if [ -z "$keep" ]
    then
      rm -f $file
    fi
    echo $release
  ;;
  check_release) #internal use
    # pkg check_release package-name flavor [cvs status filename]
    # prints "ok" if all modules of this package contain a tag pkgrel-flavor-versionMajor-versionMinor-release-platform
    if [ -z "$4" ]
    then
       file=$(mktemp)
       $0 get_cvs_status > $file
       keep=""
    else
       file=$4
       keep="yes"
    fi
    release=$($0 get_release $2 $3 $4)
    if [ -z release ]
    then
      echo "RPM out of data: No release for this package, flavor and platform"
    else
      update=$(awk '/Repository revision/ {F=substr($4,24,length($4)-25);CURREV=$3} /pkg_'$2'/ {IN_PACKAGE="yes";}
 /'$release'/ {IN_RELEASE="yes"; RELREV=substr($3,0,length($3)-1)}
 /'$3'/ {if ($1=="'$3'"){CURREV=substr($3,0,length($3)-1)}}
 /===/ {if (IN_PACKAGE=="yes") {
          if (IN_RELEASE != "yes") {
            print F " not in latest rpm"
          } else if (RELREV != CURREV) {
            RR[0]=0;
            CR[0]=0; 
            NRR=split(RELREV,RR,"."); 
            NCR=split(CURREV,CR,".");
            if (NRR >= NCR || substr(CURREV,0,length(RELREV)) != RELREV) {
              print F " current '$3' revision is " CURREV " while rpm revision is " RELREV;
            }
          }
       }
       IN_PACKAGE="no"; 
       IN_RELEASE="no";
      }' $file)
      if [ -z "$update" ]
      then
        echo ok
      else
        echo "$update"
      fi
    fi
    if [ -z "$keep" ]
    then
      rm -f $file
    fi
  ;;
  newRelease)
     # pkg newRelease pkg flavor version release dist [cvs-status-file]
     # example: pkg newRelease camac stable 3.0 2 el5
     if [ "$3" == "alpha" ]
     then
       revision="HEAD"
     else
       revision="$3"
     fi
     pdir=$(dirname $0)
     tagversion=$(echo $4 | awk -F. '{print $1 "-" $2}')
     cd $pdir/..
     cvs -Q tag  -F -r $revision -f pkgrel-${3}-${tagversion}-${5}-${6} rpm/subpackages/$2
     for mod in $($0 list $2 $7)
     do
       cvs -Q tag -F -r $revision -f pkgrel-${3}-${tagversion}-${5}-${6} $mod
     done
  ;;
  promote)
     # pkg promote alpha|beta [major]
     # example: pkg promote alpha   ### makes cvs HEAD the beta version
     # example: pkg promote beta    ### makes current beta version the stable version
     cd $(dirname $0)/..
     case $2 in
     alpha)
       cvs -Q rtag -dB beta mdsplus
       cvs -Q rtag -bR -r HEAD beta mdsplus
       flavor="beta"
       ;;
     beta)
       cvs -Q rtag -dB stable mdsplus
       cvs -Q rtag -bR -r beta stable mdsplus
       flavor="stable"
       ;;
     *)
       echo You can only promote alpha or beta
       exit
       ;;
     esac
     version=$($0 get_version $flavor)
     major_version=$(echo $version | awk -F. '{print $1}')
     minor_version=$(echo $version | awk -F. '{print $2}')
     cvs -Q tag -d pkgver-${flavor}-${major_version}-${minor_version} include/release.h
     if [ "$3" == "major" ]
     then
       let major_version=$major_version+1
       minor_version="0"
     else
       let minor_version=$minor_version+1
     fi
     cvs -Q tag pkgver-${2}-${major_version}-${minor_version} include/release.h
     for pkg in $(ls rpm/subpackages | grep -v CVS)
     do
       for rel in $(cvs status -v rpm/subpackages/$pkg | grep pkgrel-${flavor} 2>/dev/null | awk '{print $1}')
       do
         cvs -Q tag -d $rel rpm/subpackages/$pkg
       done
       cvs -Q tag pkgrel-${flavor}-${major_version}-${minor_version}-0-el5 rpm/subpackages/$pkg
       cvs -Q tag pkgrel-${flavor}-${major_version}-${minor_version}-0-el6 rpm/subpackages/$pkg
     done
  ;; 
  makeRpms)
     # pkg makeRpms flavor
     # example: pkg makeRpms stable
     if [ "$2" == "alpha" ]
     then
       revision="HEAD"
     else
       revision="$2"
     fi
     cvs_status=$(mktemp)
     $0 get_cvs_status > $cvs_status
     flavor="$2"
     version=$($0 get_version $flavor $cvs_status)
     kitname="mdsplus-${version}"
     dist=$($0 get_dist)
     rpmdir=$HOME/mdsplus_rpms/${flavor}${dist}
     dist=${dist:1}
     mkdir -p $rpmdir/RPMS
     mkdir -p $rpmdir/SOURCES
     mkdir -p $rpmdir/SPECS
     mkdir -p $rpmdir/SRPMS
     mkdir -p $rpmdir/BUILD/x86_64
     mkdir -p $rpmdir/BUILD/x86_64/i686
     mkdir -p $rpmdir/BUILDROOT/x86_64
     mkdir -p $rpmdir/BUILD/i686
     mkdir -p $rpmdir/BUILDROOT/i686
     cd $rpmdir/BUILD/x86_64
     update_mdsplus $revision
     cd $rpmdir/BUILD/x86_64/i686
     update_mdsplus $revision
     cd $rpmdir/BUILD/i686
     update_mdsplus $revision
     tar zcf $rpmdir/SOURCES/${kitname}.tar.gz --exclude CVS mdsplus
     cd mdsplus
     PATH=`pwd`/devscripts:$PATH
     specfile="$rpmdir/SPECS/mdsplus-${flavor}-${version}-${dist}.spec"
     release=$(pkg get_release kernel $flavor $cvs_status | awk -F- '{print $5}')
     chk="$(pkg check_release kernel $flavor $cvs_status)"
     if [ "$chk" != "ok" ]     
     then
       let release="$release"+1
     fi
     sed s/--VERSION--/$version/ rpm/mdsplus-part1.spec |  sed s/--RELEASE--/$release/  > $specfile
     for pkg in $(ls rpm/subpackages | grep -v "~" | grep -v "#")
     do
       if [ -f rpm/subpackages/$pkg -a "$(ls -l rpm/subpackages/$pkg | awk '{print $5}')" != "0" ]
       then
         echo "requires: mdsplus-${pkg}" >> $specfile
       fi
     done
     cat rpm/mdsplus-part2.spec >> $specfile
     need_to_build="no"
     for pkg in $(ls rpm/subpackages | grep -v "~" | grep -v "#")
     do
       if [ "$(ls -l rpm/subpackages/$pkg | awk '{print $5}')" != "0" ]
       then
         if [ -f rpm/subpackages/$pkg ]
         then 
           eval ${pkg}_update="no"
           release=$(pkg get_release $pkg $flavor $cvs_status | awk -F- '{print $5}')
           if [ -z "$release" ]
           then
	     eval ${pkg}_update="yes"
             release=0
           elif [ "$(pkg check_release $pkg $flavor $cvs_status)" != "ok" ]
           then
             eval ${pkg}_update="yes"
             echo "New release for mdsplus-${pkg} ==================================================================="
             pkg check_release $pkg $flavor $cvs_status
             echo "=================================================================================================="
             let release="$release"+1
           fi
           eval ${pkg}_release=$release
           eval update=\$${pkg}_update
           if [ "$update" == "yes" ]
           then
             need_to_build="yes"
             sed s/--RELEASE--/$release/ rpm/subpackages/$pkg >> $specfile
           fi
         fi
       fi
     done
     if [ "$need_to_build" == "yes" ]
     then
       rpmbuild --target x86_64-linux --buildroot $rpmdir/BUILDROOT/x86_64 -ba --define="_topdir $rpmdir" --define="_builddir $rpmdir/BUILD/x86_64" $specfile
       status=$?
       if [ "$status" == "0" ]
       then
         rpmbuild --target i686-linux --buildroot $rpmdir/BUILDROOT/i686 -ba --define="_topdir $rpmdir" --define="_builddir $rpmdir/BUILD/i686" $specfile
	 status=$?
       fi
     else
       status="noop"
     fi
     if [ "$status" == "0" ]
     then
       for pkg in $(ls rpm/subpackages)
       do
         if [ "$(ls -l rpm/subpackages/$pkg | awk '{print $5}')" != "0" ]
         then
           if [ -f rpm/subpackages/$pkg ]
           then 
             eval update=\$${pkg}_update
             if [ "$update" == "yes" ]
             then
               eval release=\$${pkg}_release
               pkg newRelease "$pkg" "$flavor" "$version" "$release" "$dist" "$cvs_status"
             fi
           fi
         fi
       done
     fi
     rm -f $cvs_status
     if [ "$status" != "0" -a "$status" != "noop" ]
     then
       exit $status
     else
       exit 0
     fi
  ;;
  makeRepoRpms)
  # Make repository rpms
     cd $(dirname $0)/../rpm
     rpmdir=$HOME/mdsplus_rpms/repos
     mkdir -p $rpmdir/RPMS $rpmdir/SOURCES $rpmdir/SPECS $rpmdir/SRPMS $rpmdir/BUILD
     for flavor in alpha beta stable
     do
       rpmbuild -ba --define="_topdir $rpmdir" --define="flavor $flavor" repos.spec
       rpmbuild --target=i686-linux -ba --define="_topdir $rpmdir" --define="flavor $flavor" repos.spec
     done
     mv $rpmdir/RPMS/*/* $rpmdir
     rm -Rf $rpmdir/RPMS $rpmdir/SOURCES $rpmdir/SPECS $rpmdir/SRPMS $rpmdir/BUILD
  ;;
  *)
     echo "Unknown mode /$1/"
     echo
     $0
  ;;
esac
