#!/bin/sh
#
#
# Manage MDSplus rpm packaging
#
# Usage: pkg mode options
#        mode == add remove list
#
# Modes:
#
# add: Add module to a rpm subpackage
#
#   Usage:    pkg add module-name package-name [-R]
#   examples: pkg add TreeAddNode.c kernel
#             pkg add treeshr/* kernel
#
# remove: Remove module from an rpm subpackage
#
#   Usage:    pkg remove module-name package-name [-R]
#   examples: pkg remove TreeAddNode.c kernel
#             pkg remove treeshr/* kernel
#
# list:   List modules in an rpm subpackage
#
#   Usage:    pkg list package-name
#   examples: pkg list kernel
#             pkg list NONE  (lists all modules not in any package)
#             pkg list ALL   (lists all modules and the package(s) they are in)
#
# get_release_tag: Get current rpm release tag of an rpm subpackage
#
#   Usage:    pkg get_release_tag package-name flavor
#   examples: pkg get_release_tag camac stable
#             pkgrel-stable-camac-3-0-2-el5
#
# get_release: Get current release number of a subpackage
#
#   Usage:    pkg get_release package-name flavor
#   examples: pkg get_release camac stable
#             2
#
# check_release: Check to see if rpm is up to date
#
#   Usage:    pkg check_release package-name flavor
#   examples: pkg check_release camac stable
#             tdi/camac/CamXandQ.fun current stable revision is 1.1 while rpm revision is 1.2
#       Returns the string "ok" if up to date otherwise lists module revisions not in latest rpm
#

REDHATDIST=$(rpmbuild -E '%dist' 2>/dev/null)
REDHATDIST=${REDHATDIST:1}

MAILLIST="twf@psfc.mit.edu"

cd $(dirname $0)/..

FLAVOR=$(cvs status configure.in | awk '/Sticky Tag:/ {print ($3 == "(none)") ? "alpha" : $3;}')
CVS_STATUS_FILE=""
let CVS_STATUS_FILE_REF=0

get_cvs_status()
{
  if [ "$CVS_STATUS_FILE" == "" ]
  then
    CVS_STATUS_FILE=$(mktemp -t mdsplus-cvs-status.${1}.XXXXXXXXXX)  
    cvs -q status -Rv 2>/dev/null | grep -v /Attic/ > ${CVS_STATUS_FILE}
  fi
  let CVS_STATUS_FILE_REF=CVS_STATUS_FILE_REF+1
}

delete_cvs_status()
{
  let CVS_STATUS_FILE_REF=CVS_STATUS_FILE_REF-1
  if [ "$CVS_STATUS_FILE" != "" -a "$CVS_STATUS_FILE_REF" == "0" ]
  then
    rm -f $CVS_STATUS_FILE
    CVS_STATUS_FILE=""
  fi
}

newRelease()
{
# newRelease pkg flavor version release dist cvs-status-file
 pkg=$1
 flavor=$2
 version=$3
 release=$4
 dist=$5
 cvs_status=$6
 tagversion=$(echo ${version} | awk -F. '{print $1 "-" $2}')
 cvs status -v rpm/subpackages/${pkg} | grep "pkgrel-${flavor}-${tagversion}-" | grep "-${dist}" | awk '{system("cvs tag -d " $1 " rpm/subpackages/'${pkg}'");}'
 tag="pkgrel-${flavor}-${pkg}-${tagversion}-${release}-$dist"
 cvs -Q tag  -F "$tag" rpm/subpackages/${pkg}
 for mod in $($0 list ${pkg} ${cvs_status})
 do
   cvs -Q tag -F $tag $mod
 done
}

get_version()
{
  if [ -z "$1" ]; then flavor="$FLAVOR"; else flavor="$1"; fi
  get_cvs_status get_version
  awk '/release.h,v/ {V="yes"}\
       /pkgver-'${flavor}'/ {if (V=="yes"){A[0]="";split($1,A,"-");print A[3] "." A[4];exit;}}' $CVS_STATUS_FILE
  delete_cvs_status  
}

get_release_tag()
{
  get_cvs_status get_release_tag
  pkg=$1
  version=$(get_version | awk '{v[0]=split($1,v,".");print v[1] "-" v[2]}')
  awk '/subpackages\/'$pkg'/ {R="yes"}\
       /pkgrel-'$FLAVOR'-'$pkg'-'$version'-([[:digit:]])+-'${REDHATDIST}'/ {if (R=="yes") {print $1;exit;}}\
       /====/ {R="no"}' $CVS_STATUS_FILE
  delete_cvs_status
}

get_release()
{
  get_release_tag "$1" | awk -F- 'BEGIN {REL="0"} {if (NF == 7) {REL=$6;}} END {print REL}'
}

check_release()
{
  get_cvs_status check_release
  pkg=$1
  RELEASE_TAG=$(get_release_tag $pkg)
  if [ -z "$RELEASE_TAG" ]
  then
    CHECK="RPM out of date: No release for this package, flavor and platform"
  else
    CHECK=$(awk '/File:/ {F="";IN_PACKAGE="no";} 
                    /Repository revision/ {F=substr($4,24,length($4)-25);CURREV=$3}
                    /pkg_'$pkg'/ {if (F != "") IN_PACKAGE="yes";}
                    /'$RELEASE_TAG'/ {IN_RELEASE="yes"; RELREV=substr($3,0,length($3)-1)}
                    /===/ {if (IN_PACKAGE=="yes") {
                             if (IN_RELEASE != "yes") {
                                print F " not in latest rpm"
                             } else if (RELREV != CURREV) {
                               RR[0]=0;
                               CR[0]=0; 
                               NRR=split(RELREV,RR,"."); 
                               NCR=split(CURREV,CR,".");
                               if (NRR >= NCR || substr(CURREV,0,length(RELREV)) != RELREV) {
                                 print F " current '$flavor' revision is " CURREV " while rpm revision is " RELREV;
                               }
                             }
                           }
                           IN_PACKAGE="no"; 
                           IN_RELEASE="no";
                          }' $CVS_STATUS_FILE)
  fi
  if [ -z "$CHECK" ]
  then
    CHECK="ok"
  fi
  delete_cvs_status
}

case $1 in
  "")
  cat - <<EOF
Usage: $0 pgkadd <module or directory (no wildcards)> <package-name>

          Assigns package dependency to a module or directory tree of modules.

       $0 pkgremove <module or directory (no wildcards)> <package-name>

          Remove package dpendency to a module or directory tree of modules.

       $0 list

          Generates a module package summary in html format.

       $0 list none

          Generates a list of modules that currently do not have a package depency
          assigned.

       $0 list <package-name>

          Generate a list of modules that updates to the package depend on.

       $0 list all

          Generate a module package summary in text format.
      
EOF
  ;;
  pkgadd)
    if [ ! -r ${srcdir}/rpm/subpackages/$3 ]
    then
      echo Package $3 does not exist
      exit 1
    fi
    for mod in $(find $2)
    do
      pushd $(dirname $mod) >/dev/null
      m=$(basename $mod)
      if [ ! -d $m ]
      then
        if ( cvs status $m 2>/dev/null | grep /mdsplus/repos > /dev/null )
        then
          echo "Adding `pwd`/$m to package $3"
          cvs -Q tag -F pkg_$3 $m
        fi
      fi
      popd > /dev/null
    done
  ;;
  pkgremove)
    if [ ! -r ${srcdir}/rpm/subpackages/$3 ]
    then
      echo Package $3 does not exist
      exit
    fi
    for mod in $(find $2)
    do
      pushd $(dirname $mod) >/dev/null
      m=$(basename $mod)
      if [ ! -d $m ]
      then
        if ( cvs status $m 2>/dev/null | grep -v Attic | grep /mdsplus/repos > /dev/null )
        then
          echo "Removing `pwd`/$m from package $3"
          cvs -Q tag -d pkg_$3 $m
        fi
      fi
      popd > /dev/null
    done
  ;;

  list)
    get_cvs_status list
    case $2 in
    none)
       awk '/Repository revision/ {F=substr($4,24,length($4)-25);PKG="";}\
            /pkg_/ {PKG=substr($1,5) " "}\
            /====/ {if (length(F) > 0 && length(PKG) == 0) print F; F=""}\
            END {if (length(F) > 0 && length(PKG) == 0) print F}' $CVS_STATUS_FILE | sort
    ;;

    all)
       awk '/Repository revision/ {F=substr($4,24,length($4)-25);PKG=""}\
            /pkg_/ {PKG=PKG substr($1,5) " "}\
            /====/ {if (length(F) > 0 ) { if (length(PKG) == 0) PKG="None"; print F "   " PKG}; F=""}\
            END {if (length(F) > 0 ){ if (length(PKG) == 0) PKG="None"; print F "  " PKG}}' $CVS_STATUS_FILE | sort
    ;;

    "")
       echo "<head><title>MDSplus Packaging Information - Sources</title></head>"
       echo "<h2>Modules sorted by module name</h2>"
       echo "<table border=\"1\"><tr><td><b>Module</b></td><td><b>Package(s)</b></td><td><b>Release(s)</b></td></tr>"
       awk '/File:/ {F="";PKG="";REL="";}\
            /Repository revision/ { F=substr($4,24,length($4)-25);PKG=""}\
            /pkg_/ {P=substr($1,5); PKG=PKG "<tr><td><a href=\"#" P "\">" P "</a></td></tr>"}\
            /pkgrel-/ {A[0]="";\
                        split($1,A,"-");\
                        if (length(A) == 7 ) {\
                          flavor=A[2];\
                          if (flavor == "stable") flavor=""; else flavor="-" flavor;\
                          version=A[4] "." A[5] "-" A[6] "." A[7];\
                          rpm="mdsplus" flavor "-" A[3] "-" version;\
                          href="<a href=\"http://www.mdsplus.org/repo/rh" A[7] "-" A[2] "/RPMS";\
                          REL=REL "<tr><td>" rpm "<td>" href "/x86_64/" rpm ".x86_64.rpm\">64-bit</a></td><td>" href\
                                  "/i686/" rpm ".i686.rpm\">32-bit</a></td><td>" $2 "</td><td>" $3 "</td></tr>";\
                        }\
                     }\
            /====/ {if (length(F) > 0 ) {\
                     if (length(PKG) == 0) PKG="None";\
                     print "<tr><td>" F "</td><td><table>" PKG "</table></td><td><table>" gensub("PKG",P,"g",REL) "</table></td></tr>"};\
                   }\
            END    {if (length(F) > 0 ) {\
                     if (length(PKG) == 0) PKG="None";\
                     print "<tr><td>" F "</td><td><table>" PKG "</table></td><td><table>" gensub("PKG",P,"g",REL) "</table></td></tr>"};\
                   }' $CVS_STATUS_FILE | sort -f
       echo "</table>"
       echo "<h2>Modules sorted by package name</hd>"
       echo "<table border=\"1\"><tr><td><b>Package</b></td><td><b>Module(s)</b></td></tr>"
       awk '/Repository revision/ {F=substr($4,24,length($4)-25);PKG=""}\
            /pkg_/ {PKG=substr($1,5)}\
            /====/ {if (length(F) > 0) {\
                     if (length(PKG) == 0) PKG="None";\
                       print "<tr><td><a href=\"#" PKG "\">" PKG "</a></td><td>" F "</td></tr>"}; F=""}' $CVS_STATUS_FILE | sort -f
       echo "</table>"
       for pkg in $(ls rpm/subpackages | grep -v CVS)
       do
         size=$(stat rpm/subpackages/${pkg} --format=%s)
         echo "<a name=\"$pkg\"><h2>$pkg</h2></a></br>"
	 if [ "$size" == "0" ]
         then
           echo "Not currently packaged"
         else
           echo "<pre>"
	   cat rpm/subpackages/${pkg}
	   echo "</pre>"
	 fi
       done
    ;;
    *)
       pkg="$2"
       if [ -r rpm/subpackages/${pkg} ]
       then
         awk '/Repository revision/ {F=substr($4,24,length($4)-25)}\
              /pkg_'$2'/ {print F}' $CVS_STATUS_FILE | sort
       else
         echo "No such package /${pkg}/"
       fi
    ;;
    esac
    delete_cvs_status
  ;;

  get_version) #internal use
    # pkg get_version [flavor]
    get_version "$2"
  ;;

  get_release_tag)
    # pkg get_release_tag package-name 
    # prints current release tag for a package release for the specified flavor and platform distribution
    # rpm/subpackages/package-name will normally have a tag: pkgrel-flavor-package-versionMajor-versionMinor-release-platform
    # for example: pkgrel-stable-camac-3-0-2-rhel5
    # this is used to identify the release number for the current version and platform
    get_release_tag "$2"
  ;;

  get_release)
    # pkg get_release package-name 
    # returns the release number from the release tag
    get_release "$2"
  ;;

  check_release) #internal use
    # pkg check_release package-name 
    # prints "ok" if all modules of this package contain a tag pkgrel-flavor-versionMajor-versionMinor-release-platform
    check_release $2
    echo $CHECK
  ;;

  check_releases)
     # pkg check_releases
     get_cvs_status check_releases
     for pkg in $(ls rpm/subpackages | grep -v CVS | grep -v '~' | grep -v '#')
     do
       if [ $(stat rpm/subpackages/${pkg} --format=%s) -gt 0 ]
       then
         echo $pkg
         check_release $pkg
         echo $CHECK
       fi
     done
     delete_cvs_status
  ;;

  promote)
     # pkg promote alpha|beta [major]
     # example: pkg promote alpha   ### makes cvs HEAD the beta version
     # example: pkg promote beta    ### makes current beta version the stable version
     case $2 in
     alpha)
       cvs -Q rtag -dB beta mdsplus
       cvs -Q rtag -bR -r HEAD beta mdsplus
       flavor="beta"
       ;;
     beta)
       cvs -Q rtag -dB stable mdsplus
       cvs -Q rtag -bR -r beta stable mdsplus
       flavor="stable"
       ;;
     *)
       echo You can only promote alpha or beta
       exit
       ;;
     esac
     get_version $flavor
     major_version=$(echo $VERSION | awk -F. '{print $1}')
     minor_version=$(echo $VERSION | awk -F. '{print $2}')
     cvs -Q tag -d pkgver-${flavor}-${major_version}-${minor_version} include/release.h
     if [ "$3" == "major" ]
     then
       let major_version=$major_version+1
       minor_version="0"
     else
       let minor_version=$minor_version+1
     fi
     cvs -Q tag pkgver-${2}-${major_version}-${minor_version} include/release.h
     for pkg in $(ls rpm/subpackages | grep -v CVS)
     do
       for rel in $(cvs status -v rpm/subpackages/$pkg | grep pkgrel-${flavor} 2>/dev/null | awk '{print $1}')
       do
         cvs -Q tag -d $rel rpm/subpackages/$pkg
       done
       cvs -Q tag pkgrel-${flavor}-${major_version}-${minor_version}-0-el5 rpm/subpackages/$pkg
       cvs -Q tag pkgrel-${flavor}-${major_version}-${minor_version}-0-el6 rpm/subpackages/$pkg
     done
  ;;
 
  makeRpms)
     # pkg makeRpms
     # example: pkg makeRpms
     get_cvs_status makeRpms
     rpmdir=${WORKSPACE}
     mkdir -p $rpmdir/RPMS
     mkdir -p $rpmdir/SOURCES
     mkdir -p $rpmdir/SPECS
     mkdir -p $rpmdir/SRPMS
     mkdir -p ${WORKSPACE}/../EGGS
     VERSION=$(get_version)
     if [ "$FLAVOR" == "stable" ]
     then
       rpmflavor=""
       pythonflavor=""
     else
       rpmflavor="-${FLAVOR}"
       pythonflavor="${FLAVOR}-"
     fi
     tar zcf $rpmdir/SOURCES/mdsplus${rpmflavor}-${VERSION}.tar.gz --exclude CVS ../mdsplus
     specfile="$rpmdir/SPECS/mdsplus-${FLAVOR}-${VERSION}-${REDHATDIST}.spec"
     release=$(get_release kernel)
     CHECK=$(check_release kernel)
     if [ "$CHECK" != "ok" ]     
     then
       let release="$release"+1
     fi
     sed s/--VERSION--/$VERSION/ rpm/mdsplus-part1.spec |  sed s/--RELEASE--/$release/  | sed s/--RPMFLAVOR--/$rpmflavor/ > $specfile
     for pkg in $(ls rpm/subpackages | grep -v "~" | grep -v "#")
     do
       if [ -f rpm/subpackages/$pkg -a "$(ls -l rpm/subpackages/$pkg | awk '{print $5}')" != "0" ]
       then
         echo "requires: mdsplus${rpmflavor}-${pkg}" >> $specfile
       fi
     done
     cat rpm/mdsplus-part2-hudson.spec >> $specfile
     need_to_build="no"
     for pkg in $(ls rpm/subpackages | grep -v "~" | grep -v "#")
     do
       if [ "$(ls -l rpm/subpackages/$pkg | awk '{print $5}')" != "0" ]
       then
         if [ -f rpm/subpackages/$pkg ]
         then 
           eval ${pkg}_update="no"
           RELEASE_TAG=$(get_release_tag $pkg)
           release=$(get_release $pkg)
           if [ -z "$RELEASE_TAG" ]
           then
             echo "No releases yet for $FLAVOR mdsplus-${pkg}. Building."
	     eval ${pkg}_update="yes"
           else
             CHECK=$(check_release $pkg)
             if [ "$CHECK" != "ok" ]
             then
               eval ${pkg}_update="yes"
               echo "New $FLAVOR release for mdsplus-${pkg} ==================================================================="
               echo $CHECK
               echo "=================================================================================================="
               let release="$release"+1
             elif ! (ls $rpmdir/RPMS/x86_64/mdsplus${rpmflavor}-${pkg}-${VERSION}-${release}* > /dev/null 2>&1)
             then
	       echo "RPM $rpmdir/RPMS/x86_64/mdsplus${rpmflavor}-${pkg}-${VERSION}-${release} is missing. Creating it."
	       eval ${pkg}_update="yes"
	     elif ! (ls $rpmdir/RPMS/i686/mdsplus${rpmflavor}-${pkg}-${VERSION}-${release}* > /dev/null 2>&1)
             then
	       echo "RPM $rpmdir/RPMS/i686/mdsplus${rpmflavor}-${pkg}-${VERSION}-${release} is missing. Creating it."
	       eval ${pkg}_update="yes"
             fi
           fi
           eval ${pkg}_release=$release
           eval update=\$${pkg}_update
           if [ "$update" == "yes" ]
           then
             need_to_build="yes"
           fi
           sed s/--RELEASE--/${release}.${REDHATDIST}/ rpm/subpackages/$pkg | sed s/--RPMFLAVOR--/$rpmflavor/>> $specfile
         fi
       fi
     done
     status="ok"
     if [ "$need_to_build" == "yes" ]
     then
       rpmbuild --target i686-linux --buildroot $rpmdir/BUILDROOT/i686 -ba --define="_signature gpg" --define="_gpg_name MDSplus" --define="_topdir $rpmdir" --define="_builddir ${WORKSPACE}/i686/mdsplus" $specfile
       rpmbuild_status=$?
       if [ "$rpmbuild_status" != "0" ]
       then
         if [ ! -z "$notify" ]
         then
           echo "Error building i686 ${FLAVOR}.${REDHATDIST} rpms." >> $notify
         fi
         echo "Error building i686 ${FLAVOR}.${REDHATDIST} rpms. rpmbuild returned with status=${rpmbuild_status}"
         status="error"
       else
         rpmbuild --target x86_64-linux --buildroot $rpmdir/BUILDROOT/x86_64 -ba --define="_signature gpg" --define="_gpg_name MDSplus" --define="_topdir $rpmdir" --define="_builddir ${WORKSPACE}/x86_64/mdsplus" $specfile 
         rpmbuild_status=$?
         if [ "$rpmbuild_status" != "0" ]
         then
           if [ ! -z "$notify" ]
           then
             echo "Error building x86_64 ${FLAVOR}.${REDHATDIST} rpms." >> $notify
           fi
           echo "Error build x86_64 ${FLAVOR}.$REDHATDIST} rpms. rpmbuild returned with status=${rpmbuild_status}"
           status="error"
         fi
       fi
       if [ "$python_update" == "yes" ]
       then
	 pushd ${WORKSPACE}/x86_64/mdsplus/mdsobjects/python
	 export MDSPLUS_PYTHON_VERSION="${pythonflavor}${VERSION}-${python_release}"
	 python setup.py bdist_egg
	 python_status=$?
	 if [ "$python_status" != "0" ]
	 then
	   echo "Error building MDSplus-${pythonflavor}${VERSION}-${python_release}"
	   status="error"
         else
	   mv dist/* ${WORKSPACE}/../EGGS
	 fi
	 popd
       fi
     else
       status="skip"
     fi
     if [ "$status" == "ok" ]
     then
       echo "Build completed successfully. Checking for new releases and tagging the modules"
       for pkg in $(ls rpm/subpackages)
       do
         if [ "$(ls -l rpm/subpackages/$pkg | awk '{print $5}')" != "0" ]
         then
           if [ -f rpm/subpackages/$pkg ]
           then 
             echo "Checking $pkg for new release"
             eval update=\$${pkg}_update
             if [ "$update" == "yes" ]
             then
               eval release=\$${pkg}_release
               echo "$pkg has a new release. Tag modules with $FLAVOR $VERSION $release $REDHATDIST"
               if [ ! -z "$notify" ]
               then
                 echo "New Release: mdsplus${rpmflavor}-${pkg}-$VERSION-${release}.${REDHATDIST}" >> $notify
               fi
               newRelease "$pkg" "$FLAVOR" "$VERSION" "$release" "$REDHATDIST" "$cvs_status"
             else
               echo "$pkg does not seem to be a new release"
             fi
           fi
         fi
       done
     fi
     delete_cvs_status
     if [ "$status" == "ok" ]
     then
       buildroot=$(mktemp -t -d mdsplus-repo-build.XXXXXXXXXX)
       spec=${WORKSPACE}/x86_64/mdsplus/rpm/repos.spec
       rpmbuild -ba --define="_signature gpg" --define="_gpg_name MDSplus" --define="s_dist ${REDHATDIST}" --buildroot=$buildroot --define="_topdir $rpmdir" --define="_builddir ${WORKSPACE}" --define="flavor $FLAVOR" $spec >/dev/null
       rpmbuild_status=$?
       if [ "$rpmbuild_status" != "0" ]
       then
         if [ ! -z "$notify" ]
         then
           echo "Error building repository rpm for x86_64 ${REDHATDIST} $FLAVOR" >> $notify
         fi
         echo "Error building repository rpm for x86_64 ${REDHATDIST} ${FLAVOR}. rpmbuild returned status=${rpmbuild_status}."
         status="error"
       else
         rpmbuild --target=i686-linux -ba --define="_signature gpg" --define="_gpg_name MDSplus" --define="s_dist ${REDHATDIST}" --buildroot=$buildroot --define="_topdir $rpmdir" --define="_builddir ${WORKSPACE}" --define="flavor $FLAVOR" $spec >/dev/null
         rpmbuild_status=$?
         if [ "$rpmbuild_status" != "0" ]
         then
           if [ ! -z "$notify" ]
           then
             echo "Error building repository rpm for i686 ${REDHATDIST} $FLAVOR" >> $notify
           fi
           echo "Error building repository rpm for i686 ${REDHATDIST} ${FLAVOR}. rpmbuild returned status=${rpmbuild_status}."
           status="error"
         fi
       fi
     fi
     if [ "$status" == "error" ]
     then
       exit 1
     else
       cd $rpmdir/RPMS
       createrepo . >/dev/null
       exit 0
     fi
  ;;

  *)
     echo "Unknown mode /$1/"
     echo
     $0
  ;;
esac
