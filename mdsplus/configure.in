dnl Process this file with autoconf to produce a configure script.
dnl @(#)$RCSfile: configure.in,v $ $Revision: 1.31 $
AC_INIT()

AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_SYSTEM

dnl See if we need to use native compilers
case "$target" in
hppa*) : ${CC=cc};
       : ${F77=f77};;
alpha-dec-osf*) : ${CC=cc};
		: ${F77=f77};;
esac

dnl Check out the compiler
AC_PROG_CC
AC_PROG_F77

LD=ld
LD_LDARC=""
LD_LDSHARE=""
IDL_BIN_SUF=""

case "$target" in
hppa*) CFLAGS="$CFLAGS -Ae -Wl,+s,+b\$(exec_prefix)/lib -I\$(top_srcdir)/include +DA1.1 +DS1.1 +z";
       FFLAGS="$FFLAGS +z +es -I\$(top_srcdir)/include";
       D3D_FFLAGS="+U77 +E1 -K"; 
       LDSHARE="-Wl,-a shared_archive";
       LDARC="-Wl,-a archive";
       LINKSHARED="-b";
       FOR_LDFLAGS="-v -L/usr/lib/pa1.1 -lcl -lf";
       LIBPATH="SHLIB_PATH";
       SHARETYPE=".sl";;
mips*) CFLAGS="$CFLAGS -I\$(top_srcdir)/include -signed -D_BSD_SIGNALS -KPIC";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include -D_BSD_SIGNALS -KPIC";
       LDSHARE="-B dynamic ";
       LDARC="-B static ";
       LINKSHARED="-shared -rpath $(exec_prefix)/lib";
       FOR_LDFLAGS="";
       LIBPATH="LD_LIBRARY_PATH";
       SHARETYPE=".so";;
sparc-sun-solaris2*)  LINKSHARED="-G -B symbolic -R $(exec_prefix)/lib";
       if test $CC = gcc; then
	 LD=gcc;
         LINKSHARED="-Wl,-G -Wl,-B,symbolic -Wl,-R,$(exec_prefix)/lib";
       fi;
       CFLAGS="$CFLAGS -I\$(top_srcdir)/include -fpic";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include -fpic";
       IDL_BIN_SUF="solaris2.sparc"
       LDSHARE="-Wl,-B,dynamic";
       LDARC="-Wl,-B,static";
       LD_LDARC="-B static ";
       LD_LDSHARE="-B dynamic ";
       LIBPATH="LD_LIBRARY_PATH";
       SHARETYPE=".so";;
alpha-dec-osf*) CFLAGS="$CFLAGS -I\$(top_srcdir)/include -pthread";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include";
       IDL_BIN_SUF="alpha"
       LDSHARE="-Wl,-so_archive ";
       LDARC="-Wl,-no_so ";
       LD_LDARC="-no_so ";
       LD_LDSHARE="-so_archive ";
       LINKSHARED="-shared -rpath $(exec_prefix)/lib";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="-lfor";
       SHARETYPE=".so";;
*linux*) CFLAGS="$CFLAGS -I\$(top_srcdir)/include -fpic";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include -fpic";
       LDSHARE="-shared ";
       LDARC="-static ";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       SHARETYPE=".so";;
*aix*) CFLAGS="$CFLAGS -I\$(top_srcdir)/include";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include";
       LDSHARE="";
       LDARC="";
       FOR_LDFLAGS="";
       LINKSHARED="$(exec_prefix)/lib";
       LIBPATH="LIBPATH";
       SHARETYPE=".a";;
*windows*)     CFLAGS="$CFLAGS -I\$(top_srcdir)/include";
       LDSHARE="";
       LDARC="";
       LINKSHARED="$(exec_prefix)/lib";
       SHARETYPE="";;
*)     CFLAGS="$CFLAGS -I\$(top_srcdir)/include";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include";
       FOR_LDFLAGS="";
       LDSHARE="";
       LDARC="";
       LINKSHARED="$(exec_prefix)/lib";
       LIBPATH="LD_LIBRARY_PATH";
       SHARETYPE=".so";;
esac

dnl Checks for programs.
AC_PROG_RANLIB
AC_MSG_CHECKING(for ps sysv style arguments)
mdsplus_ok=`ps -ef >/dev/null 2>/dev/null`
if test $? = 0; then
		 AC_DEFINE(PS_SYSV)
		 mdsplus_ok=yes
else
		 mdsplus_ok=no
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Define build directories

MAKEBINDIR="\$(top_srcdir)/bin/"
MAKELIBDIR="\$(top_srcdir)/lib/"
MAKEUIDDIR="\$(top_srcdir)/uid/"
MAKEETCDIR="\$(top_srcdir)/etc/"
MAKEJAVADIR="\$(top_srcdir)/java/"

dnl Checks for libraries.

AC_CHECK_LIB(c,printf)
AC_CHECK_LIB(m,pow,LIBM="-lm",LIBM="")
AC_CHECK_LIB(resolv,__dn_skipname,LIBRESOLV="-lresolv",LIBRESOLV="")
AC_CHECK_LIB(dl,dlopen,LIBDL="-ldl",LIBDL="")
AC_CHECK_LIB(dld,shl_load,LIBDLD="-ldld",LIBDLD="")
AC_CHECK_LIB(nsl,main,LIBNSL="-lnsl",LIBNSL="")
AC_CHECK_LIB(socket,socket,LIBSOCKET="-lsocket",LIBSOCKET="")
AC_CHECK_LIB(dnet_stub,gethostbyname,DNET_STUB="-ldnet_stub",DNET_STUB="")

if test "$enable_d3d" = yes -o "$enable_d3d" = on ; then
  AC_MSG_CHECKING(...D3DLIB...)
  if test "$D3DLIB"
  then
		 D3D_PACKAGE="\$(D3D_PACKAGE)";
		 D3DLIB="-L$D3DLIB";
                 AC_MSG_RESULT($D3DLIB)
  else
		 D3D_PACKAGE="";
		 D3DLIB="";
		 AC_MSG_RESULT(D3DLIB not defined, d3d package not configured)
  fi
fi

dnl Checks for header files.
AC_CHECK_HEADERS(stdarg.h fcntl.h strings.h sys/ioctl.h syslog.h unistd.h sys/filio.h netdb.h resolv.h dlfcn.h dl.h vxWorks.h windows.h sys/resource.h)

dnl Check for jdk files
AC_CHECK_FILE(/usr/include/java/jni.h,JDK_CFLAGS="-I/usr/include/java")
jni_md_inc="/usr/include/java/`uname -m`/jni_md.h"
AC_CHECK_FILE($jni_md_inc,JDK_CFLAGS="$JDK_CFLAGS -I/usr/include/java/`uname -m`")
if test "$JDK_CFLAGS"
then
  JAVA_APS="$(JAVA_APS)"
else
  JAVA_APS=""
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T


AC_MSG_CHECKING(for semun union declaration)
AC_TRY_COMPILE([#include <sys/sem.h>],[union semun arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SEMUN)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for sigvec structure declaration)
AC_TRY_COMPILE([#include <signal.h>],[struct sigvec arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SIGVEC)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(whether we need to type shmat)
AC_TRY_COMPILE([#include <sys/shm.h>],[char *shmat();],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(TYPE_SHMAT)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for two byte fd in *FILE)
AC_EGREP_HEADER(_fileL,stdio.h,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(FILE_PTR_HL)
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_HEADER_STDC
AC_CHECK_FUNCS(gethostname gettimeofday select socket)
AC_CHECK_FUNCS(sigvec sigvector)
AC_CHECK_FUNC(nis_local_host,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(USE_NIS)
fi
if test "$enable_protected" = yes -o "$enable_protected" = on ; then
		 AC_DEFINE(PROTECTED)
		 AC_CHECKING(...making protected library...)
else
		 AC_CHECKING(...making trusted library...)
fi
if test "$enable_nocell" = yes -o "$enable_nocell" = on ; then
		 AC_DEFINE(NOCELL)
		 AC_CHECKING(...ipcs standalone - no cell...)
else
		 AC_CHECKING(...ipcs part of a cell...)
fi

dnl Check for Sybase
AC_MSG_CHECKING(for SYBASE open/client)
if test -r "/usr/local/sybase/lib/libsybdb.a"
then 
        SYBASE="/usr/local/sybase"
        SYBASE_INC="-I$SYBASE/include"
        SYBASE_LIB="-L$SYBASE/lib $LD_LDARC -lsybdb $LD_LDSHARE"
        AC_MSG_RESULT(have sybase open/client)
else
        SYBASE_INC=""
        SYBASE_LIB=""
        AC_MSG_RESULT(no sybase open/client)
fi

dnl Check for Idl
AC_MSG_CHECKING(for idl)
idl_dir="/usr/local/rsi/idl"
if test -r $IDL_DIR
then
        IDL_INC="-I$idl_dir/external"
        IDL_LIB="-L$idl_dir/bin/bin.$IDL_BIN_SUF -lidl"
        AC_MSG_RESULT(have idl $IDL_INC)
else
        IDL_INC=""
        IDL_LIB=""
        AC_MSG_RESULT(no idl)
fi

AC_MSG_CHECKING(if idlsql should be built)
if test -n $SYBASE_INC -a -n $IDL_INC
then
        IDLSQL="idlsql"
        AC_MSG_RESULT(have both idl and sql so yes.)
else
        IDLSQL=""
        AC_MSG_RESULT(missing at least one of idl and sql so no.)
fi

AC_DEFINE_UNQUOTED(SHARELIB_TYPE,"${SHARETYPE}")
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(_int64)
AC_CHECK_SIZEOF(int *)
SIZEOF_INT_P=$ac_cv_sizeof_int_p
AC_PATH_XTRA
AC_PATH_PROG(UIL,uil,uil,$UILPATH:/usr/bin/X11:$PATH)
AC_PATH_PROG(JAVAC,javac,javac)
AC_PATH_PROG(JAR,jar,jar)
XM_LIBS="-lMrm -lXm"
if test "$X_CFLAGS"
then
	X_CFLAGS="$X_CFLAGS -D_NO_DXm"
else
	X_CFLAGS=-D_NO_DXm
fi
AC_DEFINE_UNQUOTED(TARGET_OS,${target_os})
AC_DEFINE_UNQUOTED(TARGET_CPU,${target_cpu})
AC_DEFINE_UNQUOTED(TARGET_VENDOR,${target_vendor})

AC_CHECK_LIB(m,pow,LIBM="-lm",LIBM="")
AC_CHECK_LIB(resolv,__dn_skipname,LIBRESOLV="-lresolv",LIBRESOLV="")
AC_CHECK_LIB(dl,dlopen,LIBDL="-ldl",LIBDL="")
AC_CHECK_LIB(dld,shl_load,LIBDLD="-ldld",LIBDLD="")
AC_CHECK_LIB(nsl,main,LIBNSL="-lnsl",LIBNSL="")
AC_CHECK_LIB(socket,socket,LIBSOCKET="-lsocket",LIBSOCKET="")
AC_SUBST(D3D_PACKAGE)
AC_SUBST(D3DLIB)
AC_SUBST(D3D_FFLAGS)
AC_SUBST(DNET_STUB)
AC_SUBST(IDL_INC)
AC_SUBST(IDL_LIB)
AC_SUBST(IDLSQL)
AC_SUBST(JAR)
AC_SUBST(JAVAC)
AC_SUBST(JAVA_APS)
AC_SUBST(JDK_CFLAGS)
AC_SUBST(LIBPATH)
AC_SUBST(MAKEBINDIR)
AC_SUBST(MAKELIBDIR)
AC_SUBST(MAKEUIDDIR)
AC_SUBST(MAKEETCDIR)
AC_SUBST(MAKEJAVADIR)
AC_SUBST(LDSHARE)
AC_SUBST(LDARC)

AC_SUBST(LIBDL)
AC_SUBST(LIBDLD)
AC_SUBST(LIBM)
AC_SUBST(LIBNSL)
AC_SUBST(LIBRESOLV)
AC_SUBST(LIBSOCKET)

AC_SUBST(LINKSHARED)
AC_SUBST(SHARETYPE)
AC_SUBST(SYBASE_INC)
AC_SUBST(SYBASE_LIB)
AC_SUBST(host)
AC_SUBST(NEED_SEMUN)
AC_SUBST(TARGETSYS)
AC_SUBST(RANLIB)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(UIL)
AC_SUBST(XM_LIBS)
AC_SUBST(LD)
AC_SUBST(FOR_LDFLAGS)
AC_SUBST(SIZEOF_INT_P)
AC_LINK_FILES(ipcs/include/ipcs, include/ipcs)
AC_LINK_FILES(include/config.h, ipcs/include/ipcs/config.h)
AC_OUTPUT(Makefile
envsyms
actions/Makefile 
ccl/Makefile 
cdu/Makefile 
d3dshr/Makefile 
dwscope/Makefile 
idlsql/Makefile
ipcs/Makefile 
ipcs/lib/Makefile 
ipcs/grandpa/Makefile 
ipcs/netmailer/Makefile 
ipcs/applications/Makefile 
ipcs/events/Makefile 
javamds/Makefile 
javascope/Makefile
javatraverser/Makefile
math/Makefile 
math/csint.f 
math/umach.f 
mdsdcl/Makefile 
mdslib/Makefile 
mdslibidl/Makefile 
mdsshr/Makefile 
mdstcpip/Makefile 
mitdevices/Makefile 
remcam/Makefile 
servershr/Makefile 
tcl/Makefile 
tdishr/Makefile 
tditest/Makefile 
traverser/Makefile 
treeshr/Makefile 
wfevent/Makefile 
xmdsshr/Makefile 
)
AC_OUTPUT_COMMANDS(make depend)
