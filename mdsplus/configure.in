dnl Process this file with autoconf to produce a configure script.
dnl @(#)$RCSfile: configure.in,v $ $Revision: 1.11 $
AC_INIT()

AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_SYSTEM

dnl See if we need to use native compiler
case "$target" in
hppa*) CC=cc;;
alpha-dec-osf*) CC=cc;;
esac

dnl Check out the compiler
AC_PROG_CC
AC_PROG_F77

LD=ld
case "$target" in
hppa*) CFLAGS="$CFLAGS -Ae -Wl,+s,+b\$(exec_prefix)/lib -I\$(top_srcdir)/include +DA1.1 +DS1.1 +z";
       FFLAGS="$FFLAGS -Wl,+s,+b\$(exec_prefix)/lib -I\$(top_srcdir)/include +DA1.1 +DS1.1 +"; 
       LDSHARE="-Wl,-a shared";
       LDARC="-Wl,-a archive";
       LINKSHARED="-b";
       FOR_LDFLAGS="-v -L/usr/lib/pa1.1 -lcl -lf";
       SHARETYPE=".sl";;
mips*) CFLAGS="$CFLAGS -I\$(top_srcdir)/include -cckr -signed -D_BSD_SIGNALS -KPIC";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include -cckr -signed -D_BSD_SIGNALS -KPIC";
       LDSHARE="-B dynamic ";
       LDARC="-B static ";
       LINKSHARED="-shared -rpath $(exec_prefix)/lib";
       FOR_LDFLAGS="";
       SHARETYPE=".so";;
sparc-sun-solaris2*)  LINKSHARED="-G -B symbolic -R $(exec_prefix)/lib";
       if test $CC = gcc; then
	 LD=gcc;
         LINKSHARED="-Wl,-G -Wl,-B,symbolic -Wl,-R,$(exec_prefix)/lib";
       fi;
       CFLAGS="$CFLAGS -I\$(top_srcdir)/include -fpic";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include -fpic";
       LDSHARE="-Wl,-B,dynamic";
       LDARC="-Wl,-B,static";
       FOR_LDFLAGS="";
       SHARETYPE=".so";;
alpha-dec-osf*) CFLAGS="$CFLAGS -I\$(top_srcdir)/include";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include";
       LDSHARE="-so_archive ";
       LDARC="-no_so ";
       LINKSHARED="-shared -rpath $(exec_prefix)/lib";
       FOR_LDFLAGS="-lfor";
       SHARETYPE=".so";;
*linux*) CFLAGS="$CFLAGS -I\$(top_srcdir)/include -fpic";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include -fpic";
       LDSHARE="-shared ";
       LDARC="-static ";
       LINKSHARED="-shared ";
       FOR_LDFLAGS="";
       SHARETYPE=".so";;
*aix*) CFLAGS="$CFLAGS -I\$(top_srcdir)/include";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include";
       LDSHARE="";
       LDARC="";
       FOR_LDFLAGS="";
       LINKSHARED="$(exec_prefix)/lib";
       SHARETYPE=".a";;
*windows*)     CFLAGS="$CFLAGS -I\$(top_srcdir)/include";
       LDSHARE="";
       LDARC="";
       LINKSHARED="$(exec_prefix)/lib";
       SHARETYPE="";;
*)     CFLAGS="$CFLAGS -I\$(top_srcdir)/include";
       FFLAGS="$FFLAGS -I\$(top_srcdir)/include";
       FOR_LDFLAGS="";
       LDSHARE="";
       LDARC="";
       LINKSHARED="$(exec_prefix)/lib";
       SHARETYPE=".so";;
esac

dnl Checks for programs.
AC_PROG_RANLIB
AC_MSG_CHECKING(for ps sysv style arguments)
mdsplus_ok=`ps -ef >/dev/null 2>/dev/null`
if test $? = 0; then
		 AC_DEFINE(PS_SYSV)
		 mdsplus_ok=yes
else
		 mdsplus_ok=no
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Define build directories

MAKEBINDIR="\$(top_srcdir)/bin/"
MAKELIBDIR="\$(top_srcdir)/lib/"
MAKEUIDDIR="\$(top_srcdir)/uid/"
MAKEETCDIR="\$(top_srcdir)/etc/"

dnl Checks for libraries.

XM_LIBS="-lMrm -lXm"
AC_CHECK_LIB(c,printf)
AC_CHECK_LIB(m,pow)
AC_CHECK_LIB(resolv,__dn_skipname)
AC_CHECK_LIB(dl,dlopen)
AC_CHECK_LIB(dld,shl_load)
AC_CHECK_LIB(nsl,main)
AC_CHECK_LIB(socket,socket)
D3DSHR=""
AC_CHECK_LIB(d3,ptdata__,D3DSHR="d3dshr")
AC_CHECK_LIB(d3,ptdata_,D3DSHR="d3dshr")
AC_CHECK_LIB(d3,ptdata,D3DSHR="d3dshr")

dnl Checks for header files.
AC_CHECK_HEADERS(stdarg.h fcntl.h strings.h sys/ioctl.h syslog.h unistd.h sys/filio.h netdb.h resolv.h dlfcn.h dl.h vxWorks.h windows.h sys/resource.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T


AC_MSG_CHECKING(for semun union declaration)
AC_TRY_COMPILE([#include <sys/sem.h>],[union semun arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SEMUN)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for sigvec structure declaration)
AC_TRY_COMPILE([#include <signal.h>],[struct sigvec arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SIGVEC)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(whether we need to type shmat)
AC_TRY_COMPILE([#include <sys/shm.h>],[char *shmat();],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(TYPE_SHMAT)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for two byte fd in *FILE)
AC_EGREP_HEADER(_fileL,stdio.h,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(FILE_PTR_HL)
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_HEADER_STDC
AC_CHECK_FUNCS(gethostname gettimeofday select socket)
AC_CHECK_FUNCS(sigvec sigvector)
AC_CHECK_FUNC(nis_local_host,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(USE_NIS)
fi
if test "$enable_protected" = yes -o "$enable_protected" = on ; then
		 AC_DEFINE(PROTECTED)
		 AC_CHECKING(...making protected library...)
else
		 AC_CHECKING(...making trusted library...)
fi
if test "$enable_nocell" = yes -o "$enable_nocell" = on ; then
		 AC_DEFINE(NOCELL)
		 AC_CHECKING(...ipcs standalone - no cell...)
else
		 AC_CHECKING(...ipcs part of a cell...)
fi
AC_DEFINE_UNQUOTED(SHARELIB_TYPE,"${SHARETYPE}")
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(_int64)
AC_CHECK_SIZEOF(int *)
SIZEOF_INT_P=$ac_cv_sizeof_int_p
AC_PATH_XTRA
AC_PATH_PROG(UIL,uil,uil,$PATH:/usr/bin/X11)
if test $X_CFLAGS
then
	X_CFLAGS="$X_CFLAGS -D_NO_DXm"
else
	X_CFLAGS=-D_NO_DXm
fi

AC_DEFINE_UNQUOTED(TARGET_OS,${target_os})
AC_DEFINE_UNQUOTED(TARGET_CPU,${target_cpu})
AC_DEFINE_UNQUOTED(TARGET_VENDOR,${target_vendor})

AC_SUBST(D3DSHR)
AC_SUBST(MAKEBINDIR)
AC_SUBST(MAKELIBDIR)
AC_SUBST(MAKEUIDDIR)
AC_SUBST(MAKEETCDIR)
AC_SUBST(LDSHARE)
AC_SUBST(LDARC)
AC_SUBST(LINKSHARED)
AC_SUBST(SHARETYPE)
AC_SUBST(host)
AC_SUBST(NEED_SEMUN)
AC_SUBST(TARGETSYS)
AC_SUBST(RANLIB)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(UIL)
AC_SUBST(XM_LIBS)
AC_SUBST(LD)
AC_SUBST(FOR_LDFLAGS);
AC_SUBST(SIZEOF_INT_P)
AC_LINK_FILES(ipcs/include/ipcs, include/ipcs)
AC_LINK_FILES(include/config.h, ipcs/include/ipcs/config.h)
AC_OUTPUT(Makefile \
ipcs/Makefile \
ipcs/lib/Makefile \
ipcs/grandpa/Makefile \
ipcs/netmailer/Makefile \
ipcs/applications/Makefile \
ipcs/events/Makefile \
mdsshr/Makefile \
treeshr/Makefile \
tdishr/Makefile \
tditest/Makefile \
xmdsshr/Makefile \
mdstcpip/Makefile \
dwscope/Makefile \
mitdevices/Makefile \
mdslibidl/Makefile \
remcam/Makefile \
cdu/Makefile \
mdsdcl/Makefile \
ccl/Makefile \
servershr/Makefile \
tcl/Makefile \
traverser/Makefile \
actions/Makefile \
mdslib/Makefile \
math/Makefile \
math/csint.f \
math/umach.f \
d3dshr/Makefile \
wfevent/Makefile \
)
AC_OUTPUT_COMMANDS(make depend)