dnl Process this file with autoconf to produce a configure script.
dnl @(#)$RCSfile: configure.in,v $ $Revision: 1.134 $
AC_INIT()

AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_SYSTEM

dnl See if we need to use native compilers
case "$target" in
hppa*) : ${CC=cc};
       : ${F77=f77};;
alpha-dec-osf*) : ${CC=cc};
		: ${F77=f77};;
sparc-sun-solaris2*) : ${CC=cc};;
esac

AC_ARG_ENABLE(nodebug,
	[  --enable-nodebug        compile without debug info],
	if test "$enableval" = yes; then
               : ${CFLAGS=""};
	fi)

AC_ARG_ENABLE(globus,
	[  --enable-globus        use globus_io for mdsip communications],
	if test "$enableval" = yes; then
               GLOBUS_CFLAGS="-DGLOBUS -I\$(GLOBUS_LOCATION)/include/gcc32dbg"
               GLOBUS_LIBS="-L\$(GLOBUS_LOCATION)/lib -lglobus_io_gcc32dbg -lglobus_gss_assist_gcc32dbg -lssl_gcc32dbg -lglobus_ssl_utils_gcc32dbg -lcrypto_gcc32dbg -lglobus_common_gcc32dbg -lglobus_gssapi_gsi_gcc32dbg"
        else
               GLOBUS_CFLAGS=""
               GLOBUS_LIBS=""
	fi)

AC_ARG_ENABLE(memcheck,
	[  --enable-memcheck       enable virtual memory debugging],
	if test "$enableval" = yes; then
           MEMCHK="-Dmalloc=MdsMALLOC -Dfree=MdsFREE -Drealloc=MdsREALLOC"
           MEMCHKLIB="-L\$(top_srcdir)/lib/ -lMdsShr"
        else
           MEMCHK=""
           MEMCHKLIB=""
        fi)

dnl Check out the compiler
AC_PROG_CC

if test "$NOF77"
then
:;
else
AC_PROG_F77
fi

LD=ld
LD_LDARC=""
LD_LDSHARE=""
IDL_BIN_SUF=""
MDSVME=""

CFLAGS="$CFLAGS $MEMCHK -I\$(top_srcdir)/include"
FFLAGS="$FFLAGS  -I\$(top_srcdir)/include"

case "$exec_prefix" in
NONE) : ${uiddir=/usr/lib/X11/uid};;
/usr/local*) : ${uiddir=/usr/lib/X11/uid};;
*) : ${uiddir=$exec_prefix/uid};;
esac

MAKESHLIBDIR="\$(top_srcdir)/lib/"
EXPORTS_FILE=""
JVM="-ljvm"
TAR_EXCLUDE="-e"
GROFF_MAN_FLAGS="-t -man -Tascii"
GROFF=groff
HUP_TO_XINETD=""
HUP_TO_INETD=""

dnl Look for java jdk
AC_MSG_CHECKING(for presence of java jdk in /usr/java)
jdk_found=0
jdk_dir=""
jdk_dirs=`find /usr/java -name 'jdk*' -type d -maxdepth 1 2>/dev/null`
if test $? = 0; then 
  for i in $jdk_dirs; do
    tmp=`ls -d $i/include >/dev/null 2>/dev/null`;
    if test $? = 0 && test $jdk_found = 0; then
      jdk_found=1;
      jdk_dir=$i;
    fi;
  done;
fi
if test $jdk_found = 1; then
  AC_MSG_RESULT(found. Will use $jdk_dir);
else
  AC_MSG_RESULT(not found);
fi

LIBPTHREAD=-lpthread
IS_HP=0
case "$target" in
hppa*) CFLAGS="$CFLAGS -Ae -Wl,+s,+b\\\$\$SHLIB_PATH:/usr/local/mdsplus/lib:\$(exec_prefix)/lib +DA1.1 +DS1.1 +z";
       FFLAGS="$FFLAGS +z +es -Wl,+s,+b\\\$\$SHLIB_PATH:/usr/local/mdsplus/lib:\$(exec_prefix)/lib +DA1.1 +DS1.1";
       D3D_FFLAGS="+U77 +E1 -K"; 
       LDSHARE="-Wl,-a,shared_archive";
       LDARC="-Wl,-a,archive";
       LD_LDSHARE="-a shared_archive";
       LD_LDARC="-a archive";
       LINKSHARED="-b +s +b\\\$\$SHLIB_PATH:/usr/local/mdsplus/lib:\$(exec_prefix)/lib";
       FOR_LDFLAGS="-v -L/usr/lib/pa1.1 -lcl -lf";
       LIBPATH="SHLIB_PATH";
       IDL_BIN_SUF="hp";
       FEXECLIBDIR="-Wl,-L";
       SHARETYPE=".sl";
       LIBPTHREAD="";
       IS_HP=1;
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";;
mips*) CFLAGS="$CFLAGS -signed -D_BSD_SIGNALS -KPIC";
       FFLAGS="$FFLAGS -D_BSD_SIGNALS -KPIC";
       LDSHARE="-B dynamic";
       LDARC="-B static";
       LD_LDSHARE="-B dynamic";
       LD_LDARC="-B static";
       LINKSHARED="-shared -rpath \\\$\$LD_LIBRARY_PATH:/usr/local/mdsplus/lib:\$(exec_prefix)/lib";
       FOR_LDFLAGS="";
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";
       SHARETYPE=".so";;
sparc-sun-solaris2*)  
       GROFF=nroff;
       GROFF_MAN_FLAGS="-t -man ";
       if test $CC = gcc; then
	 LD=gcc;
         LINKSHARED="-Wl,-G -symbolic -Wl,-R,/usr/local/mdsplus/lib:\$(exec_prefix)/lib";
         LD_LDSHARE="-Wl,-B,dynamic";
         LD_LDARC="-Wl,-B,static";
         LDSHARE="-Wl,-B,dynamic";
         LDARC="-Wl,-B,static";
         CFLAGS="$CFLAGS -fpic";
       else 
         LINKSHARED="-G -R /usr/local/mdsplus/lib:\$(exec_prefix)/lib";
         LD_LDARC="-B static ";
         LD_LDSHARE="-B dynamic ";
         LDSHARE="-B dynamic";
         LDARC="-B static";
         if test -n "`echo 'int main(){return 0;}' | cc -o /dev/null -E -c -Kpic - 2>&1`"; then
           LDSHARE="-Wl,-B,dynamic";
           LDARC="-Wl,-B,static";
         else
           CFLAGS="$CFLAGS -Kpic";
         fi;
       fi;
       FFLAGS="$FFLAGS -PIC";
       IDL_BIN_SUF="solaris2.sparc"
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       JVM="";
       jni_inc_dir="/usr/java/include";
       jni_md_inc_dir="/usr/java/include/solaris";
       HUP_TO_INETD="kill -HUP \`ps -e -o pid -o command | grep /usr/sbin/inetd | grep -v grep | awk '{print $1}'\`";;
alpha-dec-osf*) CFLAGS="$CFLAGS -pthread -ieee";
       FFLAGS="$FFLAGS -pthread";
       GROFF_MAN_FLAGS="-t -mgan -Tascii";
       IDL_BIN_SUF="alpha"
       LDSHARE="-Wl,-so_archive ";
       LDARC="-Wl,-no_so ";
       LD_LDARC="-no_so ";
       LD_LDSHARE="-so_archive ";
       LINKSHARED="-shared -rpath \\\$\$LD_LIBRARY_PATH:/usr/local/mdsplus/lib:\$(exec_prefix)/lib";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="-lfor";
       FEXECLIBDIR="-L";
       MDSVME="mdsvme";
       SHARETYPE=".so";
       jni_inc_dir="/usr/include/java";
       jni_md_inc_dir="/usr/include/java/`uname -m`";
       HUP_TO_INETD="kill -HUP \`ps -e -o pid -o command | grep /usr/sbin/inetd | grep -v grep | awk '{print $1}'\`";;
*86*linux*) CFLAGS="$CFLAGS -fpic";
       FFLAGS="$FFLAGS -fpic -Wno-globals -fno-backslash";
       IDL_BIN_SUF="linux.x86";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared -rpath \\\$\$LD_LIBRARY_PATH:/usr/local/mdsplus/lib:\$(exec_prefix)/lib";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       TAR_EXCLUDE="--exclude";
       jni_inc_dir="$jdk_dir/include";
       jni_md_inc_dir="$jdk_dir/include/linux";
       JVM="-L$jdk_dir/jre/lib/i386/classic -ljvm -L$jdk_dir/jre/lib/i386/native_threads -lhpi";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";;
*linux*) CFLAGS="$CFLAGS -fpic";
       FFLAGS="$FFLAGS -fpic -Wno-globals -fno-backslash";
       IDL_BIN_SUF="linux"
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared -rpath \\\$\$LD_LIBRARY_PATH:/usr/local/mdsplus/lib:\$(exec_prefix)/lib";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       TAR_EXCLUDE="--exclude";
       jni_inc_dir="$jdk_dir/include";
       jni_md_inc_dir="$jdk_dir/include/linux";
       JVM="-L$jdk_dir/jre/lib/i386/classic -ljvm -L$jdk_dir/jre/lib/i386/native_threads -lhpi";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";;
*aix*) CFLAGS="$CFLAGS";
       FFLAGS="$FFLAGS";
       LDSHARE="";
       LDARC="";
       FOR_LDFLAGS="";
       LINKSHARED="-bnoentry -bM:SRE -bE:\$(EXPORTS)";
       LIBPATH="LIBPATH";
       MAKESHLIBDIR="\$(top_srcdir)/shlib/";
       EXPORTS_FILE="\$(EXPORTS)";
       FEXECLIBDIR="-L";
       SHARETYPE=".a";
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";;
*windows*)     CFLAGS="$CFLAGS";
       LDSHARE="";
       LDARC="";
       LINKSHARED="";
       FEXECLIBDIR="-L";
       SHARETYPE="";;
*)     CFLAGS="$CFLAGS";
       FFLAGS="$FFLAGS";
       FOR_LDFLAGS="";
       LDSHARE="";
       LDARC="";
       LINKSHARED="";
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";;
esac

dnl Checks for programs.
AC_PROG_RANLIB
AC_MSG_CHECKING(for ps sysv style arguments)
mdsplus_ok=`ps -ef >/dev/null 2>/dev/null`
if test $? = 0; then
		 AC_DEFINE(PS_SYSV)
		 mdsplus_ok=yes
else
		 mdsplus_ok=no
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Define build directories

MAKEBINDIR="\$(top_srcdir)/bin/"
MAKELIBDIR="\$(top_srcdir)/lib/"
MAKEUIDDIR="\$(top_srcdir)/uid/"
MAKEETCDIR="\$(top_srcdir)/etc/"
MAKEJAVADIR="\$(top_srcdir)/java/"
if test "$MAKELIBDIR" = "$MAKESHLIBDIR"; then
	MAKESHLIBDIR_RULE=""
else
	MAKESHLIBDIR_RULE="$MAKESHLIBDIR : ; mkdir $MAKESHLIBDIR"
fi


dnl Check for 0xnnnnll (long long constants)
AC_LANG_SAVE
AC_LANG_C
AC_TRY_COMPILE(,int gub(){return((int)0x1ll);},AC_DEFINE(HAVE_LL_CONSTANTS))
AC_LANG_RESTORE


dnl Checks for libraries.

if test $IS_HP = 0; then
  AC_CHECK_LIB(c,printf)
fi
AC_CHECK_LIB(m,pow,LIBM="-lm",LIBM="")
AC_CHECK_LIB(resolv,__dn_skipname,LIBRESOLV="-lresolv",LIBRESOLV="")
AC_CHECK_LIB(dl,dlopen,LIBDL="-ldl",LIBDL="")
AC_CHECK_LIB(dld,shl_load,LIBDLD="-ldld",LIBDLD="")
AC_CHECK_LIB(c,gethostbyname,LIBNSL="",AC_CHECK_LIB(socket,gethostbyname,LIBNSL="-lsocket",AC_CHECK_LIB(nsl,gethostbyname,LIBNSL="-lnsl",LIBNSL="")))
AC_CHECK_LIB(c,socket,LIBSOCKET="",AC_CHECK_LIB(socket,socket,LIBSOCKET="-lsocket",LIBSOCKET=""))
AC_CHECK_LIB(dnet_stub,gethostbyname,DNET_STUB="-ldnet_stub",DNET_STUB="")
AC_CHECK_LIB(pthread,pthread_kill,LIBPTHREAD=$LIBPTHREAD,AC_CHECK_LIB(cma,pthread_create,LIBPTHREAD="-lcma",LIBPTHREAD=""))
AC_CHECK_LIB(exc,__Ots_CSpecificHandler,LIBPTHREAD="$LIBPTHREAD -lexc")
AC_CHECK_LIB(pthread,pthread_lock_global_np,AC_DEFINE(HAVE_PTHREAD_LOCK_GLOBAL_NP))
AC_CHECK_LIB(pthread,__pthread_lock_global_np,AC_DEFINE(HAVE_PTHREAD_LOCK_GLOBAL_NP))
AC_CHECK_LIB(pthread,pthread_mutexattr_settype,AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETTYPE))
AC_CHECK_LIB(pthread,pthread_mutexattr_setkind_np,AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETKIND))
AC_CHECK_LIB(readline,readline,LIBREADLINE="-lreadline -lcurses",LIBREADLINE="",-lcurses)

AC_ARG_ENABLE(d3d,
	[  --enable-d3d            build d3d ptdata access library ],
	if test "$enableval" = yes; then
          AC_MSG_CHECKING(...D3DLIB_PATH...)
          : ${D3DLIB_PATH:?"You must define D3DLIB_PATH to be the directory containing the libd3 library"}
          if test -r "$D3DLIB_PATH/libd3.a" -o -r "$D3DLIB_PATH/libd3$SHARETYPE"
          then
		 D3D_PACKAGE="\$(D3D_PACKAGE)";
		 D3DLIB="-L$D3DLIB_PATH";
                 AC_MSG_RESULT($D3DLIB)
          else
		 AC_MSG_RESULT(libd3.a or libd3$SHARETYPE not found in $D3DLIB_PATH)
                 exit 0
          fi
        fi)

AC_ARG_ENABLE(staticmotif,
	[  --enable-staticmotif    build with static motif libraries ],
        if test "$enableval" = yes; then
          MOTIF_LDARC=$LDARC;
          MOTIF_LDSHARE="$LDSHARE";
          MOTIF_LD_LDARC=$LD_LDARC;
          MOTIF_LD_LDSHARE="$LD_LDSHARE";
        else
          MOTIF_LDARC="";
          MOTIF_LDSHARE="";
          MOTIF_LD_LDARC="";
          MOTIF_LD_LDSHARE="";
        fi)
  
dnl Checks for header files.
AC_CHECK_HEADERS(stdarg.h fcntl.h strings.h sys/ioctl.h syslog.h unistd.h sys/filio.h netdb.h resolv.h)
AC_CHECK_HEADERS(dlfcn.h dl.h vxWorks.h windows.h sys/resource.h readline/readline.h)

dnl Check for jdk files
AC_CHECK_FILE($jni_inc_dir/jni.h,JDK_CFLAGS="-I$jni_inc_dir")
AC_CHECK_FILE($jni_md_inc_dir/jni_md.h,JDK_CFLAGS="$JDK_CFLAGS -I$jni_md_inc_dir")
if test "$JDK_CFLAGS"
then
  JAVA_APS="\$(JAVA_APS)"
else
  JAVA_APS=""
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T


AC_MSG_CHECKING(for semun union declaration)
AC_TRY_COMPILE([#include <sys/sem.h>],[union semun arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SEMUN)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for sigvec structure declaration)
AC_TRY_COMPILE([#include <signal.h>],[struct sigvec arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SIGVEC)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(whether we need to type shmat)
AC_TRY_COMPILE([#include <sys/shm.h>],[char *shmat();],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(TYPE_SHMAT)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for two byte fd in *FILE)
AC_EGREP_HEADER(_fileL,stdio.h,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(FILE_PTR_HL)
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_HEADER_STDC
AC_CHECK_FUNCS(gethostname gettimeofday select socket)
AC_CHECK_FUNCS(sigvec sigvector)
AC_CHECK_FUNC(nis_local_host,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(USE_NIS)
fi

dnl Check for Sybase
AC_MSG_CHECKING(for SYBASE open/client)
: ${SYBASE=/usr/local/sybase}
if test -r "$SYBASE/lib/libsybdb.a" 
then 
        SYBASE_INC="-I$SYBASE/include"
        SYBASE_LIB="-L$SYBASE/lib $LD_LDARC -lsybdb $LD_LDSHARE"
        AC_MSG_RESULT(have sybase open/client)
else
        SYBASE_INC=""
        SYBASE_LIB=""
        AC_MSG_RESULT(no sybase open/client)
fi

dnl Check for Idl
AC_MSG_CHECKING(for idl)
IDL_DIR="/usr/local/rsi/idl"
if test -r $IDL_DIR
then
        IDL_INC="-I$IDL_DIR/external"
        IDL_LIB="-L$IDL_DIR/bin/bin.$IDL_BIN_SUF -lidl"
        IDLMDSEVENT="idlmdsevent"
        AC_MSG_RESULT(have idl $IDL_INC)
else
        IDL_INC=""
        IDL_LIB=""
        IDLMDSEVENT=""
        AC_MSG_RESULT(no idl)
fi

AC_MSG_CHECKING(if idlsql should be built)
if test -n "$SYBASE_INC" -a -n "$IDL_INC"
then
        IDLSQL="idlsql"
        AC_MSG_RESULT(have both idl and sql so yes.)
else
        IDLSQL=""
        AC_MSG_RESULT(missing at least one of idl and sql so no.)
fi

AC_DEFINE_UNQUOTED(SHARELIB_TYPE,"${SHARETYPE}")
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(_int64)
AC_CHECK_SIZEOF(int *)
SIZEOF_INT_P=$ac_cv_sizeof_int_p
AC_PATH_XTRA
AC_PATH_PROG(UIL,uil,uil,$UILPATH:/usr/bin/X11:$PATH:/usr/dt/bin)
AC_PATH_PROG(JAVAC,javac,javac)
AC_PATH_PROG(JAR,jar,jar)
XM_LIBS="-lMrm -lXm"
if test "$X_CFLAGS"
then
	X_CFLAGS="$X_CFLAGS -D_NO_DXm"
else
	X_CFLAGS=-D_NO_DXm
fi
LDFLAGS="$X_LIBS"
AC_CHECK_LIB(Xext,XextAddDisplay,LIBXEXT="-lXext",LIBXEXT="")
LDFLAGS="$X_LIBS $LIBXEXT"
AC_CHECK_LIB(Xp,XpGetDocumentData,LIBXP="-lXp",LIBXP="")
LDFLAGS=""

AC_DEFINE_UNQUOTED(TARGET_OS,${target_os})
AC_DEFINE_UNQUOTED(TARGET_CPU,${target_cpu})
AC_DEFINE_UNQUOTED(TARGET_VENDOR,${target_vendor})

AC_SUBST(D3D_PACKAGE)
AC_SUBST(D3DLIB)
AC_SUBST(D3D_FFLAGS)
AC_SUBST(DNET_STUB)
AC_SUBST(EXPORTS_FILE)
AC_SUBST(FEXECLIBDIR)
AC_SUBST(FOR_LDFLAGS)
AC_SUBST(GLOBUS_CFLAGS)
AC_SUBST(GLOBUS_LIBS)
AC_SUBST(GROFF)
AC_SUBST(GROFF_MAN_FLAGS)
AC_SUBST(HUP_TO_INETD)
AC_SUBST(HUP_TO_XINETD)
AC_SUBST(IDL_INC)
AC_SUBST(IDL_LIB)
AC_SUBST(IDLMDSEVENT)
AC_SUBST(IDLSQL)
AC_SUBST(JAR)
AC_SUBST(JAVAC)
AC_SUBST(JAVA_APS)
AC_SUBST(JDK_CFLAGS)
AC_SUBST(JVM)
AC_SUBST(LD)
AC_SUBST(LDSHARE)
AC_SUBST(LDARC)
AC_SUBST(LD_LDSHARE)
AC_SUBST(LD_LDARC)
AC_SUBST(LIBDL)
AC_SUBST(LIBDLD)
AC_SUBST(LIBM)
AC_SUBST(LIBNSL)
AC_SUBST(LIBPATH)
AC_SUBST(LIBPTHREAD)
AC_SUBST(LIBREADLINE)
AC_SUBST(LIBRESOLV)
AC_SUBST(LIBSOCKET)
AC_SUBST(LIBXP)
AC_SUBST(LIBXEXT)
AC_SUBST(LINKSHARED)
AC_SUBST(MAKEBINDIR)
AC_SUBST(MAKELIBDIR)
AC_SUBST(MAKESHLIBDIR)
AC_SUBST(MAKESHLIBDIR_RULE)
AC_SUBST(MAKEUIDDIR)
AC_SUBST(MAKEETCDIR)
AC_SUBST(MAKEJAVADIR)
AC_SUBST(MDSVME)
AC_SUBST(MEMCHKLIB)
AC_SUBST(MOTIF_LDSHARE)
AC_SUBST(MOTIF_LDARC)
AC_SUBST(MOTIF_LD_LDSHARE)
AC_SUBST(MOTIF_LD_LDARC)
AC_SUBST(NEED_SEMUN)
AC_SUBST(RANLIB)
AC_SUBST(SHARETYPE)
AC_SUBST(SIZEOF_INT_P)
AC_SUBST(SYBASE_INC)
AC_SUBST(SYBASE_LIB)
AC_SUBST(host)
AC_SUBST(TARGETSYS)
AC_SUBST(TAR_EXCLUDE)
AC_SUBST(UIL)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(XM_LIBS)
AC_SUBST(uiddir)

AC_OUTPUT(Makefile
envsyms
actions/Makefile 
ccl/Makefile 
cdu/Makefile 
cts/Makefile
d3dshr/Makefile 
dwscope/Makefile 
idlmdsevent/Makefile
idlsql/Makefile
javaclient/Makefile
javadispatcher/Makefile
javamds/Makefile 
javascope/Makefile
javatraverser/Makefile
manpages/Makefile
math/Makefile 
math/csint.f 
math/umach.f 
mdsdcl/Makefile 
mdsjet/Makefile
mdslib/Makefile 
mdslibidl/Makefile 
mdsshr/Makefile 
mdstcpip/Makefile 
mdsvme/Makefile
mitdevices/Makefile 
remcam/Makefile 
rpm/Makefile
rpm/envsyms
rpm/post_install_script
servershr/Makefile 
setevent/Makefile
tcl/Makefile 
tdishr/Makefile 
tdic/Makefile
tditest/Makefile 
traverser/Makefile 
treeshr/Makefile 
wfevent/Makefile 
xmdsshr/Makefile 
)
AC_OUTPUT_COMMANDS(make depend)
