dnl Process this file with autoconf to produce a configure script.
dnl @(#)$RCSfile: configure.in,v $ $Revision: 1.252 $
AC_INIT()

#AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_SYSTEM
AC_CHECK_SIZEOF(int *)
SIZEOF_INT_P=$ac_cv_sizeof_int_p
AC_CHECK_LIB(socket,socket,SOCKETLIB="-l socket",SOCKELIB="")
AC_CHECK_LIB(nsl,inet_addr,NSLLIB="-l nsl",NSLLIB="")
dnl See if we need to use native compilers
case "$target" in
alpha-dec-osf*) : ${CC=cc};
		: ${F77=f77};;
sparc-sun-solaris2*) : ${CC=cc};;
esac


if test "$NOF77"
then
:;
else
AC_PROG_F77([g77 gfortran f90 f95])
fi

dnl Check out the compiler
AC_PROG_CC
AC_PROG_CXX

AC_ARG_ENABLE(mdsip_connections,
        [ --enable-mdsip_connections     Use new improved mdsip connections],
        if test "$enableval" = yes; then
          AC_DEFINE(MDSIP_CONNECTIONS)
	  MDSIP_CONNECTIONS="yes";
        else 
          MDSIP_CONNECTIONS="no";
        fi)

AC_ARG_ENABLE(nodebug,
	[  --enable-nodebug        compile without debug info],
	if test "$enableval" = yes; then
               CFLAGS="";
               FFLAGS="";
	fi)

AC_ARG_ENABLE(perf,
	[  --enable-perf          enable MDSplus I/O statistics])
	if test "$enableval" = yes; then
		AC_DEFINE(USE_PERF)
	fi

AC_ARG_ENABLE(java,
	[ --disable-java	do not build java libraries and applications],
        java_enable="$enableval",
        java_enable="yes"
)

dnl this new java section hoses macos x... why not use the autoconf java macros?
dnl I'm faking a disable so I can enable by hand later...
if test "$target_vendor" = "apple"
then
	dnl the java section breaks with macos x due to different structure
	dnl this disables it for now..  is there a AC_PROG_JAVA?
	java_enable="no"
	AC_ARG_ENABLE(universal,
		[ --enable-universal	Build MacOSX Universal Binary ],
		universal_build="$enableval"
		)
	if test "$universal_build" = yes; then
		CFLAGS="-O2 -g -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc"
		LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc"
		F77=fort77
	fi 
fi

if test "$java_enable" = "yes"
then
  if test -z "$JDK_DIR"
  then
    JDK_DIR="/etc/alternatives/java_sdk"
  fi
  AC_ARG_WITH(jdk,
	[ --with-jdk=java-jdk-dir	specify location of java jdk],
	jdk_dir="$withval",
	jdk_dir="$JDK_DIR"
  )
dnl Look for java jdk
  AC_MSG_CHECKING(for presence of Java Development Kit)
  if [ test -r $jdk_dir/jre ]
  then
    AC_MSG_RESULT(found.)
  else
	cat <<EOF


YOU NEED TO SPECIFY THE JAVA JDK DIRECTORY OR DISABLE JAVA
The jdk directory can be specified by either defining a JDK_DIR environment
variable or by using the --with-jdk=jdk-directory option.
You can disable java by using the --disable-java option.



EOF
	exit
  fi
fi

JDK_DIR="$jdk_dir"

AC_ARG_WITH(xio,
	[  --with-xio=globus-location:flavor  use globus xio for mdsip communications],
          MDSTCPIP="mdsip_xio roam"
          GLOBUS_LOCATION=`echo $withval | awk -F: '{print $1}'`
          GLOBUS_FLAVOR=`echo $withval | awk -F: '{print $2}'`
          if test "$GLOBUS_FLAVOR" = ""
	  then
            cat <<EOF

YOU NEED TO PROVIDE GLOBUS_LOCATION and FLAVOR when using the --with-xio option
Format:   --with-xio=globus-install-directory:flavor
Example:  --with-xio=/usr/local/gt3:gcc32dbg

Note do not include pthr in the flavor as it is automatically added.

EOF
            exit
          elif ( echo $GLOBUS_FLAVOR | grep pthr > /dev/null )
          then
	    cat <<EOF

Do NOT INCLUDE pthr in the globus flavor!

EOF
	    exit
          fi 
        ,
          MDSTCPIP="mdstcpip"
        )

AC_ARG_WITH(gsi,
	[  --with-gsi=globus-location:flavor  use globus xio for mdsip communications],
          MDSTCPIP="mdstcpip roam"
          GLOBUS_LOCATION=`echo $withval | awk -F: '{print $1}'`
          GLOBUS_FLAVOR=`echo $withval | awk -F: '{print $2}'`
          if test "$GLOBUS_FLAVOR" = ""
	  then
            cat <<EOF

YOU NEED TO PROVIDE GLOBUS_LOCATION and FLAVOR when using the --with-gsi option
Format:   --with-gsi=globus-install-directory:flavor
Example:  --with-gsi=/usr/local/gt3:gcc32dbg

Note do not include pthr in the flavor as it is automatically added.

EOF
            exit
          elif ( echo $GLOBUS_FLAVOR | grep pthr > /dev/null )
          then
	    cat <<EOF

Do NOT INCLUDE pthr in the globus flavor!

EOF
	    exit
          fi 
        ,
          MDSTCPIP="mdstcpip"
        )

AC_ARG_WITH(srb,
	[  --with-srb=srb-install-dir  Enable srb capabilities ],
          SRB_LOCATION=$withval
          if test "$SRB_LOCATION" = yes
	  then
		cat <<EOF

YOU NEED TO PROVIDE THE LOCATION OF THE unixIO subdirectory of your srb installation
when using the --with-srb option

Format:   --with-srb=srb-install-directory
Example:  --with-srb=/scratch/slocal/testc/SRB3_2client/unixIO 

EOF
	    exit
          fi
	  SRBLIB="-L${SRB_LOCATION} -lsrbUio"
          SRBINCLUDE="-I${SRB_LOCATION}"
          AC_DEFINE(SRB)
        )

AC_ARG_ENABLE(globus,
	[  --enable-globus        use globus_io for mdsip communications],
	if test "$enableval" = yes; then
               : ${GLOBUS_FLAVOR=gcc32dbg}
               GLOBUS_CFLAGS="-DGLOBUS -I\$(GLOBUS_LOCATION)/include/$GLOBUS_FLAVOR"
               GLOBUS_LIBS="-L\$(GLOBUS_LOCATION)/lib -lglobus_io_$GLOBUS_FLAVOR \
                            -lglobus_common_$GLOBUS_FLAVOR"
        else
               GLOBUS_CFLAGS=""
               GLOBUS_LIBS=""
	fi)

AC_ARG_ENABLE(memcheck,
	[  --enable-memcheck       enable virtual memory debugging],
	if test "$enableval" = yes; then
           MEMCHK="-Dmalloc=MdsMALLOC -Dfree=MdsFREE -Drealloc=MdsREALLOC -Dcalloc=MdsCALLOC"
           MEMCHKLIB="-L\$(top_srcdir)/lib/ -lMdsShr"
        else
           MEMCHK=""
           MEMCHKLIB=""
        fi)

AC_ARG_ENABLE(gcc_profiling,
	[  --enable-gcc_profiling       enable gcc profiling],
	if test "$enableval" = yes; then
           GCCPROF="-pg"
        else
           GCCPROF=""
        fi)

if test "$NOF77"
then
:;
else
AC_PROG_F77
fi

AC_ARG_WITH(idl,
	[ --with-idl=idl-top-dir	specify location of idl such as /usr/local/itt/idl],
	IDL_DIR="$withval",
	IDL_DIR="")
if test "$IDL_DIR" = ""
then
  if test -r /usr/local/itt/idl
  then
    IDL_DIR="/usr/local/itt/idl"
  elif test -r /usr/local/rsi/idl
  then
    IDL_DIR="/usr/local/rsi/idl"
  fi
fi
AC_MSG_CHECKING(for idl)
if test "$IDL_DIR" != "" -a -r $IDL_DIR
then
  IDL_INC="-I$IDL_DIR/external"
  IDLMDSEVENT="idlmdsevent"
  IDLMDSWIDGETS="idlmdswidgets"
  AC_MSG_RESULT(have idl $IDL_INC)
else
  IDL_INC=""
  IDLMDSEVENT=""
  IDLMDSWIDGETS=""
  AC_MSG_RESULT(no idl)
fi

FORLD=ld
LD=ld
LD_LDARC=""
LD_LDSHARE=""
IDL_LD=""
MDSVME=""
LOC="%loc"
VAL="%val"

CFLAGS="$CFLAGS $GCCPROF $MEMCHK -I\$(top_srcdir)/include"
FFLAGS="$FFLAGS  -I\$(top_srcdir)/include"

if test "$exec_prefix" = "NONE" -a "$prefix" = "NONE"
then
  : ${uiddir:=$ac_default_prefix/uid}
elif test "$exec_prefix" = "NONE"
then
  : ${uiddir:=$prefix/uid}
else
  : ${uiddir:=$exec_prefix/uid}
fi
MAKEUIDDIR="\$(top_srcdir)/uid/"
MAKESHLIBDIR="\$(top_srcdir)/lib/"
MAKEBINDIR="\$(top_srcdir)/bin/"
MAKELIBDIR="\$(top_srcdir)/lib/"
EXPORTS_FILE=""
JVM="-ljvm"
JDK_LIVECONNECT="$jdk_dir/jre/lib/plugin.jar"
TAR_EXCLUDE="-e"
GROFF_MAN_FLAGS="-t -man -Tascii"
GROFF=groff
HUP_TO_XINETD=""
HUP_TO_INETD=""
UILCMD="uil"
CC_LDFLAGS=""
FOR_LDFLAGS=""
GCCLIB="`gcc -print-libgcc-file-name 2> /dev/null`";


LIBPTHREAD=-lpthread
IS_HP=0
MITDEVICESIO_TARGETS=""
case "$target" in
hppa*) CFLAGS="$CFLAGS -O0 -g -fpic -D_XOPEN_SOURCE_EXTENDED";
       FFLAGS="$FFLAGS -O0 -g -fpic  -Wno-globals -fno-backslash";
       D3D_FFLAGS="+U77 +E1 -K"; 
       LDSHARE="-Wl,-a,shared_archive -Wl,+s";
       LDARC="-Wl,-a,archive";
       LD_LDSHARE="-a shared_archive";
       LD_LDARC="-a archive";
       LINKSHARED="-b +s +b /usr/lib:/usr/local/lib";
       CC_LDFLAGS="-Wl,+s"
       FOR_LDFLAGS="-Wl,+s";
       LIBPATH="SHLIB_PATH";
       IDL_LD="-L${IDL_DIR}/bin/bin.hp -lidl";
       FEXECLIBDIR="-Wl,-L";
       SHARETYPE=".sl";
       IS_HP=1;
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";;
mips*) CFLAGS="$CFLAGS -signed -D_BSD_SIGNALS -KPIC";
       FFLAGS="$FFLAGS -D_BSD_SIGNALS -KPIC";
       LDSHARE="-B dynamic";
       LDARC="-B static";
       LD_LDSHARE="-B dynamic";
       LD_LDARC="-B static";
       LINKSHARED="-shared ";
       FOR_LDFLAGS="";
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";
       SHARETYPE=".so";;
*-solaris2*)  
       GROFF=nroff;
       GROFF_MAN_FLAGS="-t -man ";
       if test $SIZEOF_INT_P = 4; then CFLAGS="$CFLAGS -D_ILP32 "; else CFLAGS="$CFLAGS -D_LP64 "; fi;
       if test $CC = gcc; then
	 LD=gcc;
	 FORLD=gcc;
         LINKSHARED="-shared ";
         LD_LDSHARE="-Wl,-B,dynamic";
         LD_LDARC="-Wl,-B,static";
         LDSHARE="-Wl,-B,dynamic";
         LDARC="-Wl,-B,static";
         CFLAGS="$CFLAGS -fPIC -D_POSIX_PTHREAD_SEMANTICS";
         LDFLAGS="$CFLAGS";
       else 
         LINKSHARED="-G ";
         LD_LDARC="-B static ";
         LD_LDSHARE="-B dynamic ";
         LDSHARE="-B dynamic";
         LDARC="-B static";
         if test -n "`echo 'int main(){return 0;}' | cc -o /dev/null -E -c -Kpic - 2>&1`"; then
           LDSHARE="-Wl,-B,dynamic";
           LDARC="-Wl,-B,static";
         else
           CFLAGS="$CFLAGS -Kpic";
         fi;
       fi;
       if test "$F77" = "gfortran"
       then
         FFLAGS="$FFLAGS -fPIC -fno-range-check"
       else
         FFLAGS="$FFLAGS -PIC";
       fi
       IDL_LD="-L${IDL_DIR}/bin/bin.solaris2.sparc -lidl"
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       JVM="";
       jni_inc_dir="${JDK_DIR}/include";
       jni_md_inc_dir="${JDK_DIR}/include/solaris";
       HUP_TO_INETD="kill -HUP \`ps -e -o pid -o command | grep /usr/sbin/inetd | grep -v grep | awk '{print $1}'\`";;
alpha*-dec-osf*) CFLAGS="$CFLAGS -pthread -ieee";
       FFLAGS="$FFLAGS -pthread";
       GROFF_MAN_FLAGS="-t -mgan -Tascii";
       IDL_LD="-expect_unresolved 'IDL_*'"
       LDSHARE="-Wl,-so_archive ";
       LDARC="-Wl,-no_so ";
       LD_LDARC="-no_so ";
       LD_LDSHARE="-so_archive ";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="-lfor";
       FEXECLIBDIR="-L";
       MDSVME="mdsvme";
       SHARETYPE=".so";
       jni_inc_dir="/usr/include/java";
       jni_md_inc_dir="/usr/include/java/`uname -m`";
       HUP_TO_INETD="kill -HUP \`ps -e -o pid -o command | grep /usr/sbin/inetd | grep -v grep | awk '{print $1}'\`";;
*86*linux*)
       CFLAGS="$CFLAGS -fpic -shared-libgcc -fno-strict-aliasing";
       FORLD="$F77";
       if ( uname -m | grep 64 > /dev/null ) 
       then
         if ( echo $target | grep 64 > /dev/null )
         then
           if [ -d /usr/lib64 ]
           then
             D64="64"
           else
             D64=""
           fi
           SYB64=$D64
           CFLAGS="$CFLAGS -m64"
           LD="ld -m elf_x86_64 --oformat elf64-x86-64 --no-warn-mismatch"
           FFLAGS="$FFLAGS -m64"
           FORLD="$F77 -m64"
           UILCMD=uil
           uiddir="${uiddir}${D64}"
	   MAKELIBDIR="\$(top_srcdir)/lib${D64}/"
           MAKESHLIBDIR="\$(top_srcdir)/lib${D64}/"
           MAKEUIDDIR="\$(top_srcdir)/uid${D64}/"
	   MAKEBINDIR="\$(top_srcdir)/bin${D64}/"
           JVM="-L$jdk_dir/jre/lib/amd64/server -ljvm -L$jdk_dir/jre/lib/amd64  -ljava -L$jdk_dir/jre/lib/amd64/native_threads -lhpi";
         else
           CFLAGS="$CFLAGS -m32";
           LD="ld -m elf_i386 --oformat elf32-i386 --no-warn-mismatch"
           FFLAGS="$FFLAGS -m32"
           FORLD="$F77 -m32"
           UILCMD=uil32
           uiddir="${uiddir}32"
           MAKELIBDIR="\$(top_srcdir)/lib32/"
           MAKESHLIBDIR="\$(top_srcdir)/lib32/"
           MAKEUIDDIR="\$(top_srcdir)/uid32/"
           MAKEBINDIR="\$(top_srcdir)/bin32/"
           JVM="-L$jdk_dir/jre/lib/i386/client -ljvm -L$jdk_dir/jre/lib/i386  -ljava -L$jdk_dir/jre/lib/i386/native_threads -lhpi";
         fi
	 CC_LDFLAGS="$CFLAGS"
       else
           JVM="-L$jdk_dir/jre/lib/i386/client -ljvm -L$jdk_dir/jre/lib/i386  -ljava -L$jdk_dir/jre/lib/i386/native_threads -lhpi";
       fi
       if (test "$F77" = "g77"); then
         FFLAGS="$FFLAGS -Wno-globals"
         LOC="%loc"
       elif (test "$F77" = "gfortran"); then
         FFLAGS="$FFLAGS -fno-range-check"
         LOC="loc"
       elif (($F77 --version | grep 'GNU Fortran') >/dev/null 2>&1); then
         FFLAGS="$FFLAGS -fno-range-check"
         LOC="loc"
       fi
       FOR_LDFLAGS="-lg2c"
       FFLAGS="$FFLAGS -fpic -fno-backslash";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       TAR_EXCLUDE="--exclude";
       MITDEVICESIO_TARGETS="${MAKESHLIBDIR}libMitDevicesIO${SHARETYPE} ${MAKELIBDIR}libMitDevicesIO.a ${MAKEBINDIR}daq_server"; 
       jni_inc_dir="$jdk_dir/include";
       jni_md_inc_dir="$jdk_dir/include/linux";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";;
*linux*) CFLAGS="$CFLAGS -fpic -shared-libgcc -fno-strict-aliasing";
       if (test "$F77" = "g77"); then
         FFLAGS="$FFLAGS -Wno-globals"
         FOR_LDFLAGS="-lg2c"
         FORLD="$F77"
         LOC="%loc"
       elif (test "$F77" = "gfortran"); then
         FFLAGS="$FFLAGS -fno-range-check";
         FORLD="$F77"
         LOC="loc"
         FOR_LDFLAGS="-lg2c"
       elif (($F77 --version | grep 'GNU Fortran') >/dev/null 2>&1); then
         FFLAGS="$FFLAGS -fno-range-check"
         FORLD="$F77"
         LOC="loc"
         FOR_LDFLAGS="-lg2c"
       fi
       FFLAGS="$FFLAGS -fpic -fno-backslash";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       TAR_EXCLUDE="--exclude";
       jni_inc_dir="$jdk_dir/include";
       jni_md_inc_dir="$jdk_dir/include/linux";
       JVM="-L$jdk_dir/jre/lib/i386/client  -ljvm -L$jdk_dir/jre/lib/i386 -ljava -L$jdk_dir/jre/lib/i386/native_threads -lhpi";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";;
*apple-darwin*) echo "Configuring for MacOS X...";
       CFLAGS="$CFLAGS -no-cpp-precomp -dynamic";
       if (test "$F77" = "f77"); then 
          FFLAGS="$FFLAGS -w -f -V -W"
		  FORLD="$F77"
       elif (test "$F77" = "g77"); then
          FFLAGS="$FFLAGS -fno-backslash -Wno-globals";
          FOR_LDFLAGS="-lg2c"; 
		  FORLD="$F77"
       elif (test "$F77" = "fort77"); then
          FFLAGS="$FFLAGS -!bs -Wf,-!it";
          FOR_LDFLAGS="-L/usr/local/lib/ -lf2c";
		  FORLD="$CC"
		  LOC="F2C_LOC"
		  VAL="F2C_VAL"
       fi;
       FEXECLIBDIR="-L";
       LD="$CC"
       LDSHARE="";
       LD_LDSHARE="";
       LDARC="";
       LD_LDARC="";
       UILPATH=/usr/OpenMotif/bin;
       MOTIF_LDARC="-Wl,-bind_at_load -multiply_defined suppress -L/usr/OpenMotif/lib"
       MOTIF_LD_LDARC="-multiply_defined suppress -L/usr/OpenMotif/lib"
       dnl LINKSHARED="$LDFLAGS -dynamiclib -install_name $libdir/\$(@F) -headerpad_max_install_names -prebind \
	   dnl -seg_addr_table_filename \$(@F) -seg_addr_table ../macosx/bindtable -Wl,-single_module";
	   LINKSHARED="$LDFLAGS -dynamiclib -install_name $libdir/\$(@F) -headerpad_max_install_names -Wl,-single_module";
	   LINKMODULE="$LDFLAGS -bundle -undefined dynamic_lookup";
       IDL_LD="";
       X_CFLAGS="-I/usr/OpenMotif/include"
       LINKJNI="$LINKSHARED";
       SHARETYPE=".dylib";
       SHARETYPEJNI=".jnilib";
       SHARETYPEMOD=".so";
       LIBPTHREAD="";
       TAR_EXCLUDE="--exclude";
       JDK_DIR=/Library/Java/Home
       jni_inc_dir="$JDK_DIR/include";
       jni_md_inc_dir="$jni_inc_dir";
       JDK_LIVECONNECT="$JDK_DIR/lib/plugin.jar"
       JVM="-framework JavaVM";
       LIBPATH="DYLD_LIBRARY_PATH"
       HUP_TO_XINETD="killall -HUP xinetd";
       HUP_TO_INETD="killall -HUP inetd";
       dnl HDF5_LIBS="-lz -lsz";
       dnl HDF5_DIR="/usr/local";
       X_EXTRA_LIBS="-lXmu";;
*aix*) CFLAGS="$CFLAGS -fpic -fno-strict-aliasing";
       FFLAGS="$FFLAGS -qpic -qnoescape";
       LDSHARE="";
       LDARC="";
       FOR_LDFLAGS="-lxlf90";
       LINKSHARED="-bnoentry -bM:SRE -bE:\$(EXPORTS)";
       LIBPATH="LIBPATH";
       MAKESHLIBDIR="\$(top_srcdir)/shlib/";
       EXPORTS_FILE="\$(EXPORTS)";
       FEXECLIBDIR="-L";
       SHARETYPE=".a";
       LOC="loc";
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";;
*windows*)     CFLAGS="$CFLAGS";
       LDSHARE="";
       LDARC="";
       LINKSHARED="";
       FEXECLIBDIR="-L";
       SHARETYPE="";;
*qnx*) CFLAGS="$CFLAGS -fpic";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";;
*)     CFLAGS="$CFLAGS";
       FFLAGS="$FFLAGS";
       FOR_LDFLAGS="";
       LDSHARE="";
       LDARC="";
       LINKSHARED="";
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";;
esac

dnl see if we have libdc1394 libraries and what version
AC_CHECK_LIB(dc1394,dc1394_new ,dc1394_v2=yes)
AC_CHECK_LIB(dc1394,dc1394_get_camera_info ,dc1394_v1=yes)
AC_CHECK_LIB(raw1394,raw1394_get_libversion ,raw1394=yes)
if test "$dc1394_v2" = "yes" -a "$raw1394"="yes"; then
  DC1394_SUPPORT2="${MAKESHLIBDIR}libdc1394_support2$SHARETYPE"
else
  DC1394_SUPPORT2=""
fi
if test "$dc1394_v1" = "yes" -a "$raw1394"="yes"; then
  DC1394_SUPPORT="${MAKESHLIBDIR}libdc1394_support$SHARETYPE"
else
  DC1394_SUPPORT=""
fi

dnl Checks for programs.
AC_PROG_RANLIB
AC_MSG_CHECKING(for ps sysv style arguments)
mdsplus_ok=`ps -ef >/dev/null 2>/dev/null`
if test $? = 0; then
		 AC_DEFINE(PS_SYSV)
		 mdsplus_ok=yes
else
		 mdsplus_ok=no
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Define build directories

MAKEETCDIR="\$(top_srcdir)/etc/"
MAKEJAVADIR="\$(top_srcdir)/java/"

if test "$MAKELIBDIR" = "$MAKESHLIBDIR"; then
	MAKESHLIBDIR_RULE=""
else
	MAKESHLIBDIR_RULE="$MAKESHLIBDIR : ; mkdir $MAKESHLIBDIR"
fi


dnl Check for 0xnnnnll (long long constants)
AC_LANG_SAVE
AC_LANG_C
AC_TRY_COMPILE(,int gub(){return((int)0x1ll);},AC_DEFINE(HAVE_LL_CONSTANTS))
AC_LANG_RESTORE

AC_MSG_CHECKING(if JNI libraries are different)
if test "$LINKJNI" 
then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
	SHARETYPEJNI="$SHARETYPE"
        LINKJNI="$LINKSHARED"
fi

AC_MSG_CHECKING(if IDL plugins are different)
if test "$LINKMODULE" 
then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
	SHARETYPEMOD="$SHARETYPE"
        LINKMODULE="$LINKSHARED"
fi


dnl Checks for libraries.

if test $IS_HP = 0; then
  AC_CHECK_LIB(c,printf)
fi
AC_CHECK_LIB(m,pow,LIBM="-lm",LIBM="")
AC_CHECK_LIB(resolv,__dn_skipname,LIBRESOLV="-lresolv",LIBRESOLV="")
AC_CHECK_LIB(dl,dlopen,LIBDL="-ldl",LIBDL="")
AC_CHECK_LIB(dld,shl_load,LIBDLD="-ldld",LIBDLD="")
AC_CHECK_LIB(c,gethostbyname,LIBNSL="",AC_CHECK_LIB(socket,gethostbyname,LIBNSL="-lsocket",AC_CHECK_LIB(nsl,gethostbyname,LIBNSL="-lnsl",LIBNSL="")))
AC_CHECK_LIB(c,socket,LIBSOCKET="",AC_CHECK_LIB(socket,socket,LIBSOCKET="-lsocket",LIBSOCKET=""))
AC_CHECK_LIB(dnet_stub,gethostbyname,DNET_STUB="-ldnet_stub",DNET_STUB="")
AC_CHECK_LIB(pthread,pthread_kill,LIBPTHREAD=$LIBPTHREAD,AC_CHECK_LIB(cma,pthread_create,LIBPTHREAD="-lcma",LIBPTHREAD=""))
AC_CHECK_LIB(exc,__Ots_CSpecificHandler,LIBPTHREAD="$LIBPTHREAD -lexc")
AC_CHECK_LIB(pthread,pthread_lock_global_np,AC_DEFINE(HAVE_PTHREAD_LOCK_GLOBAL_NP))
AC_CHECK_LIB(pthread,__pthread_lock_global_np,AC_DEFINE(HAVE_PTHREAD_LOCK_GLOBAL_NP))
AC_CHECK_LIB(pthread,pthread_mutexattr_settype,AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETTYPE))
AC_CHECK_LIB(pthread,pthread_mutexattr_setkind_np,AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETKIND))
AC_SEARCH_LIBS([clock_gettime],[],AC_DEFINE(HAVE_CLOCK_GETTIME))
AC_SEARCH_LIBS([readline],[readline 'readline -lcurses'],,,)
if test "$ac_cv_search_readline" = "no"
then
  AC_MSG_RESULT("libreadline is not available so the build of tdic will be skipped") 
  TDIC=""
  LIBREADLINE=""
else
  LIBREADLINE="$ac_cv_search_readline"
  TDIC="tdic"
fi
AC_CHECK_LIB(c,gettimeofday,AC_DEFINE(HAVE_GETTIMEOFDAY))
AC_CHECK_LIB(c,getaddrinfo,AC_DEFINE(HAVE_GETADDRINFO))
AC_ARG_ENABLE(d3d,
	[  --enable-d3d            build d3d ptdata access library ],
	if test "$enableval" = yes; then
          AC_MSG_CHECKING(...D3DLIB_PATH...)
          : ${D3DLIB_PATH:?"You must define D3DLIB_PATH to be the directory containing the libd3 library"}
          if test -r "$D3DLIB_PATH/libd3.a" -o -r "$D3DLIB_PATH/libd3$SHARETYPE"
          then
		 D3D_PACKAGE="\$(D3D_PACKAGE)";
		 D3DLIB="-L$D3DLIB_PATH";
                 AC_MSG_RESULT($D3DLIB)
          else
		 AC_MSG_RESULT(libd3.a or libd3$SHARETYPE not found in $D3DLIB_PATH)
                 exit 0
          fi
        fi)

AC_ARG_ENABLE(staticmotif,
	[  --enable-staticmotif    build with static motif libraries ],
        if test "$enableval" = yes; then
          MOTIF_LDARC=$LDARC;
          MOTIF_LDSHARE="$LDSHARE";
          MOTIF_LD_LDARC=$LD_LDARC;
          MOTIF_LD_LDSHARE="$LD_LDSHARE";
        else
          MOTIF_LDARC="";
          MOTIF_LDSHARE="";
          MOTIF_LD_LDARC="";
          MOTIF_LD_LDSHARE="";
        fi)
  
dnl Checks for header files.
AC_CHECK_HEADERS(stdarg.h fcntl.h strings.h sys/ioctl.h syslog.h unistd.h sys/filio.h netdb.h resolv.h sys/types.h linux/types.h drm/drm.h)
AC_CHECK_HEADERS(dlfcn.h dl.h vxWorks.h windows.h sys/resource.h readline/readline.h)
AC_CHECK_HEADERS(malloc.h)

REMCAM="remcam"
CCL="ccl"
MITDEVICES="mitdevices"
GEN_DEVICE="gen_device"
AC_CHECK_HEADERS(scsi/sg.h,DO_CAMSHR="yes",DO_CAMSHR="no")
if test "$DO_CAMSHR" = yes
then
  CAMSHR="camshr"
  REMCAMLIB="RemCamShr"
else
  CAMSHR=""
  REMCAMLIB="CamShr"
fi

dnl Check for default hdf5 header and library
HDF5_APS=""
AC_CHECK_HEADERS(hdf5.h,DO_HDF5="yes")
if test "$DO_HDF5" = yes; then
  AC_CHECK_LIB(hdf5,H5Fopen,DO_HDF5="yes",DO_HDF5="no")
  if test "$DO_HDF5" = yes; then
    HDF5_APS="\$(HDF5_APS)"
    HDF5_INCS=""
    HDF5_LIBS=""
  fi

dnl Check for user specified  hdf5 header and library
if test -n "$HDF5_DIR" -a -r "$HDF5_DIR"
then
      HDF5_APS="\$(HDF5_APS)"
      HDF5_INCS="-I$HDF5_DIR/include"
      HDF5_LIBS="$HDF5_LIBS -L$HDF5_DIR/lib"
fi	
fi

dnl Check for jdk files
AC_CHECK_FILE($jni_inc_dir/jni.h,JDK_CFLAGS="-I$jni_inc_dir")
AC_CHECK_FILE($jni_md_inc_dir/jni_md.h,JDK_CFLAGS="$JDK_CFLAGS -I$jni_md_inc_dir")
if test "$JDK_CFLAGS"
then
  JAVA_APS="\$(JAVA_APS)"
else
  JAVA_APS=""
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T

dnl Check if we are missing <sys/sem.h> but can use <semaphore.h> API instead
AC_MSG_CHECKING([if we should use named semaphores])
AC_TRY_CPP([ #include <sys/sem.h> ] , namedsem=no, namedsem=yes )
if test "$namedsem" = yes; then
AC_TRY_CPP([ #include <semaphore.h> ], 
  [AC_DEFINE(USE_SEMAPHORE_H) namedsem=yes], 
   namedsem=no)
fi
AC_MSG_RESULT([ $namedsem])

dnl Check if we want to try Named Pipes instead of <sys/msg.h> API
AC_CHECK_HEADERS(sys/msg.h,mdsplus_ok=no,mdsplus_ok=yes)
if test "$mdsplus_ok" = yes; then
   AC_CHECK_HEADERS(sys/stat.h, mdsplus_ok=yes, mdsplus_ok=no)
   AC_MSG_CHECKING(if we should use pipes for messaging)
   if test "$mdsplus_ok" = yes; then
        AC_DEFINE(USE_PIPED_MESSAGING)
        AC_MSG_RESULT($mdsplus_ok)
    fi
fi

#AC_CACHE_CHECK([for timezone and daylight externals], mdsplus_cv_have_timezone, 
#    AC_TRY_LINK([#include <time.h>], [long z2 = timezone - daylight*3600;], 
#        mdsplus_cv_have_timezone=yes, mdsplus_cv_have_timezone=no))
#    if test "$mdsplus_cv_have_timezone" = yes; then
#        AC_DEFINE(HAVE_TIMEZONE)
#    else
#        AC_CACHE_CHECK([for tm_gmtoff in struct tm], mdsplus_cv_tm_gmtoff_in_tm,
#            AC_TRY_LINK([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],
#            mdsplus_cv_tm_gmtoff_in_tm=yes,mdsplus_cv_tm_gmtoff_in_tm=no))
#    fi
#    if test "$mdsplus_cv_tm_gmtoff_in_tm" = yes; then
#        AC_DEFINE(USE_TM_GMTOFF)
#    fi
AC_CACHE_CHECK([for tm_gmtoff in struct tm], mdsplus_cv_tm_gmtoff_in_tm,
     AC_TRY_LINK([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],
         mdsplus_cv_tm_gmtoff_in_tm=yes,mdsplus_cv_tm_gmtoff_in_tm=no))
     if test "$mdsplus_cv_tm_gmtoff_in_tm" = yes; then
        AC_DEFINE(USE_TM_GMTOFF)
     else
       AC_CACHE_CHECK([for timezone and daylight externals], mdsplus_cv_have_timezone, 
          AC_TRY_LINK([#include <time.h>], [long z2 = timezone - daylight*3600;], 
             mdsplus_cv_have_timezone=yes, mdsplus_cv_have_timezone=no))
          if test "$mdsplus_cv_have_timezone" = yes; then
            AC_DEFINE(HAVE_TIMEZONE)
          fi
     fi

AC_MSG_CHECKING(for semun union declaration)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/sem.h>],[union semun arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SEMUN)
fi
AC_MSG_RESULT($mdsplus_ok)
AC_MSG_CHECKING(for sigvec structure declaration)
AC_TRY_COMPILE([#include <signal.h>],[struct sigvec arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SIGVEC)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(whether we need to type shmat)
AC_TRY_COMPILE([#include <sys/shm.h>],[char *shmat();],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(TYPE_SHMAT)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for two byte fd in *FILE)
AC_EGREP_HEADER(_fileL,stdio.h,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(FILE_PTR_HL)
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_HEADER_STDC
AC_CHECK_FUNCS(gethostname gettimeofday select socket)
AC_CHECK_FUNCS(sigvec sigvector)
AC_CHECK_FUNC(malloc)
AC_CHECK_FUNC(nis_local_host,mdsplus_ok=yes,mdsplus_ok=no)
AC_CHECK_FUNC(malloc)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(USE_NIS)
fi

dnl Check for Sybase
AC_SEARCH_LIBS([dbopen],[sybdb],SYBASE_LIB="-lsybdb";SYBASE_INC="-DSYBASE";SYBASE="SYBASE",SYBASE_LIB="",)
if test "$SYBASE_LIB" = ""
then
  AC_MSG_CHECKING(for SYBASE open/client or freetds)
  : ${SYBASE=/usr/local/sybase}
  if test -r "/usr/lib${SYB64}/libsybdb.so"
  then
        SYBASE_INC="-DSYBASE"
        SYBASE_LIB="-lsybdb"
        SYBASE="SYBASE"
        AC_MSG_RESULT(have freetds)
  elif test -r "$SYBASE/lib${SYB64}/libsybdb.a" 
  then 
        SYBASE_INC="-I$SYBASE/include -DSYBASE"
        SYBASE_LIB="-L$SYBASE/lib${SYB64} $LD_LDARC -lsybdb $LD_LDSHARE"
	SYBASE="SYBASE"
        AC_MSG_RESULT(have sybase open/client)
  else
        SYBASE_INC=""
        SYBASE_LIB=""
	SYBASE=""
        AC_MSG_RESULT(no sybase open/client)
  fi
fi
AC_MSG_CHECKING(if mdssql should be built)
if test -n "$SYBASE_INC"
then
        MDSSQL="mdssql"
        AC_MSG_RESULT(have sql so yes.)
else
        MDSSQL=""
        AC_MSG_RESULT(missing sql so no.)
fi

AC_DEFINE_UNQUOTED(SHARELIB_TYPE,"${SHARETYPE}")
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(_int64)
AC_PATH_XTRA
if test $UILCMD = uil32
then
  X_LIBS=`echo $X_LIBS | sed s/lib64/lib/`
fi
AC_PATH_PROG(UIL,$UILCMD,$UILCMD,$UILPATH:/usr/bin/X11:$PATH:/usr/dt/bin)
AC_MSG_CHECKING(for uil command)
if ( which $UIL 2>/dev/null )
then
  UIL="env LANG=en_US $UIL"
  MOTIF_APS="\$(MOTIF_APS)"
  AC_MSG_RESULT(have uil so openmotif apps will be built.)
else
  MOTIF_APS=""
  AC_MSG_RESULT(no uil so skipping openmotif apps.openmotif-devel not installed.)
fi
AC_PATH_PROG(JAVAC,javac,javac,$jdk_dir/bin)
AC_PATH_PROG(JAR,jar,jar,$jdk_dir/bin)
AC_PATH_PROG(RMIC,rmic,rmic,$jdk_dir/bin)

XM_LIBS="-lMrm -lXm"
if test "$X_CFLAGS"
then
	X_CFLAGS="$X_CFLAGS -D_NO_DXm"
else
	X_CFLAGS=-D_NO_DXm
fi
AC_CHECK_LIB(Xext,XextAddDisplay,LIBXEXT="-lXext",LIBXEXT="")
AC_CHECK_LIB(Xp,XpGetDocumentData,LIBXP="-lXp",LIBXP="")

AC_DEFINE_UNQUOTED(TARGET_OS,${target_os})
AC_DEFINE_UNQUOTED(TARGET_CPU,${target_cpu})
AC_DEFINE_UNQUOTED(TARGET_VENDOR,${target_vendor})

LIBS="$LIBPTHREAD $LIBS"
AC_SUBST(CAMSHR)
AC_SUBST(CC_LDFLAGS)
AC_SUBST(CCL)
AC_SUBST(D3D_PACKAGE)
AC_SUBST(D3DLIB)
AC_SUBST(D3D_FFLAGS)
AC_SUBST(DNET_STUB)
AC_SUBST(EXPORTS_FILE)
AC_SUBST(FEXECLIBDIR)
AC_SUBST(FORLD)
AC_SUBST(FOR_LDFLAGS)
AC_SUBST(GCCLIB)
AC_SUBST(GEN_DEVICE)
AC_SUBST(GLOBUS_CFLAGS)
AC_SUBST(GLOBUS_FLAVOR)
AC_SUBST(GLOBUS_LIBS)
AC_SUBST(GLOBUS_LOCATION)
AC_SUBST(GROFF)
AC_SUBST(GROFF_MAN_FLAGS)
AC_SUBST(HDF5_INCS)
AC_SUBST(HDF5_LIBS)
AC_SUBST(HDF5_APS)
AC_SUBST(HUP_TO_INETD)
AC_SUBST(HUP_TO_XINETD)
AC_SUBST(IDL_INC)
AC_SUBST(IDL_LIB)
AC_SUBST(IDLMDSEVENT)
AC_SUBST(IDLMDSWIDGETS)
AC_SUBST(JAR)
AC_SUBST(JAVAC)
AC_SUBST(JAVA_APS)
AC_SUBST(JDK_CFLAGS)
AC_SUBST(JDK_DIR)
AC_SUBST(JVM)
AC_SUBST(JDK_LIVECONNECT)
AC_SUBST(LD)
AC_SUBST(LDSHARE)
AC_SUBST(LDARC)
AC_SUBST(LD_LDSHARE)
AC_SUBST(LD_LDARC)
AC_SUBST(LIBDL)
AC_SUBST(LIBDLD)
AC_SUBST(LIBM)
AC_SUBST(LIBNSL)
AC_SUBST(LIBPATH)
AC_SUBST(LIBPTHREAD)
AC_SUBST(LIBREADLINE)
AC_SUBST(LIBRESOLV)
AC_SUBST(LIBSOCKET)
AC_SUBST(LIBXP)
AC_SUBST(LIBXEXT)
AC_SUBST(LINKSHARED)
AC_SUBST(LINKJNI)
AC_SUBST(LINKMODULE)
AC_SUBST(LOC)
AC_SUBST(VAL)
AC_SUBST(MAKEBINDIR)
AC_SUBST(MAKELIBDIR)
AC_SUBST(MAKESHLIBDIR)
AC_SUBST(MAKESHLIBDIR_RULE)
AC_SUBST(MAKEUIDDIR)
AC_SUBST(MAKEETCDIR)
AC_SUBST(MAKEJAVADIR)
AC_SUBST(MDSIP_CONNECTIONS)
AC_SUBST(MDSSQL)
AC_SUBST(MDSTCPIP)
AC_SUBST(MDSVME)
AC_SUBST(MEMCHKLIB)
AC_SUBST(MITDEVICES)
AC_SUBST(MITDEVICESIO_TARGETS)
AC_SUBST(MOTIF_APS)
AC_SUBST(MOTIF_LDSHARE)
AC_SUBST(MOTIF_LDARC)
AC_SUBST(MOTIF_LD_LDSHARE)
AC_SUBST(MOTIF_LD_LDARC)
AC_SUBST(NEED_SEMUN)
AC_SUBST(NSLLIB)
AC_SUBST(RANLIB)
AC_SUBST(REMCAM)
AC_SUBST(REMCAMLIB)
AC_SUBST(RMIC)
AC_SUBST(SHARETYPE)
AC_SUBST(SHARETYPEJNI)
AC_SUBST(SHARETYPEMOD)
AC_SUBST(SIZEOF_INT_P)
AC_SUBST(SOCKETLIB)
AC_SUBST(SRBLIB)
AC_SUBST(SRBINCLUDE)
AC_SUBST(SYBASE_INC)
AC_SUBST(SYBASE_LIB)
AC_SUBST(host)
AC_SUBST(TARGETSYS)
AC_SUBST(TAR_EXCLUDE)
AC_SUBST(TDIC)
AC_SUBST(UIL)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(XM_LIBS)
AC_SUBST(uiddir)
AC_SUBST(USE_SEMAPHORE_H)
AC_SUBST(USE_PIPED_MESSAGING)
AC_SUBST(USE_TM_GMTOFF)
AC_SUBST(DC1394_SUPPORT)
AC_SUBST(DC1394_SUPPORT2)
AC_CONFIG_HEADER(include/config.h)
AC_OUTPUT(Makefile
envsyms
actions/Makefile
cacheshr/Makefile 
camshr/Makefile
ccl/Makefile 
cdu/Makefile 
d3dshr/Makefile 
dwscope/Makefile 
gen_device/Makefile
hdf5/Makefile
idlmdsevent/Makefile
idlmdswidgets/Makefile
javaclient/Makefile
javadispatcher/Makefile
javamds/Makefile 
javascope/Makefile
javatraverser/Makefile
javadevices/Makefile
manpages/Makefile
math/Makefile 
math/csint.f 
math/dsvrgn.f
math/svign.f
math/svrgn.f
math/umach.f 
mdsdcl/Makefile 
mdslib/Makefile 
mdslibidl/Makefile 
mdsobjects/cpp/Makefile
mdsobjects/java/Makefile
mdsmisc/Makefile
mdsshr/Makefile 
mdssql/Makefile
mdstcpip/Makefile 
mdsvme/Makefile
mitdevices/Makefile 
remcam/Makefile 
roam/Makefile
rpm/Makefile
rpm/envsyms
rpm/post_install_script
rtevents/Makefile
scripts/Makefile
servershr/Makefile 
setevent/Makefile
tcl/Makefile 
tdishr/Makefile 
tdic/Makefile
tditest/Makefile 
traverser/Makefile 
treeshr/Makefile 
wfevent/Makefile 
xmdsshr/Makefile
xtreeshr/Makefile
)
AC_OUTPUT_COMMANDS(make depend)
if test "$JAVA_APS" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The development environment for Java applications was not found.)
  AC_MSG_WARN(The build of Java applications will be skipped from the build of MDSplus.)
  AC_MSG_WARN(Install a Java SDK and reconfigure to build the Java apps.)
  AC_MSG_WARN()
fi
if test "$LIBREADLINE" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The libreadline library was not found)
  AC_MSG_WARN(The tdic application will be skipped.)
  AC_MSG_WARN(Install the package containing the readline library (perhaps libreadline-devel) and reconfigure to build the tdic application.)
  AC_MSG_WARN()
  AC_MSG_WARN()
fi
if test "$SYBASE" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The open sybase software was not found in /usr/local/sybase.)
  AC_MSG_WARN(The sqlserver interface libraries will be skipped.)
  AC_MSG_WARN()
  AC_MSG_WARN()
fi
if test "$MOTIF_APS" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The openmotif development environment was not found.)
  AC_MSG_WARN(The openmotif based applications and libraries will be skipped.)
  AC_MSG_WARN()
  AC_MSG_WARN()
fi
if test "$IDL_DIR" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The IDL application directory was not found.)
  AC_MSG_WARN(The some libraries used for interfacing IDL with MDSplus will be skipped.)
  AC_MSG_WARN()
  AC_MSG_WARN()
fi

