--	SQL_MODULE.SQLMOD
--	Interface to SQL from C, FORTRAN, or others.

MODULE		SUB_MODULE
LANGUAGE	GENERAL
AUTHORIZATION	RDB$DBHANDLE

--	Ken Klare, LANL P-4	(c)1991,1992
--------------------------------------------------------
-- Text passed by C null-terminated string not VMS descriptor.
-- SQLCA is always output. SQLN of SQLDA is always input.
-- VAX-only:
--	GENERAL and BASIC
--	SQLCA (sometimes), SQLDA, BY DESCRIPTOR,
--	PREPARE name FROM string, [SELECT LIST] INTO descr
--	DESCRIBE name [SELECT LIST | MARKERS] INTO descr
--	EXECUTE name [USING {name, ... | DESCRIPTOR name}]
--	RELEASE name
--	DECLARE name [INSERT ONLY | READ ONLY] [TABLE | LIST]
--		CURSOR FOR name
--	USING DESCRIPTOR name
-- Initialize stmtid to 0 before PREPARE.
-- Please use single quotes on strings.
-- This may not be multi-entrant because we need IDs.
-- Unclear: segmented string selects and inserts.
-- SQLCA or SQLCODE must be passed.
-- Undocumented feature: each routine returns VMS status.
--------------------------------------------------------
-- Organization:
--	get stmt_tx from source.
--	PREPARE id SELECT LIST INTO sele_da FROM text.
--	DESCRIBE id MARKERS INTO mark_da.
--	load mark_da.SQLD markers from the source.
--	if (sele_da.SQLD > 0)
--		DECLARE cu READ ONLY TABLE CURSOR FOR id.
--		OPEN cu USING DESCRIPTOR mark_da.
--		loop
--			FETCH cu USING DESCRIPTOR sele_da.
--			store somewhere.
--		CLOSE cu.
--	else	EXECUTE mark_da.
--	RELEASE id.
--	ROLLBACK or COMMIT.
--------------------------------------------------------
-- Combines PREPARE and DESCRIBE...SELECT LIST.
-- Only SELECT statements set SQLD positive.

PROCEDURE	SQL__PREPARE
	SQLCODE
	:stmt_tx	CHAR BY DESCRIPTOR	--input
	:stmtid		INTEGER			--output
	;
	PREPARE :stmtid FROM :stmt_tx;

-- Gets input select information on number and type.
-- Only select statements set SQLD positive.
PROCEDURE	SQL__DESCRIBE_SELECT
	SQLCODE
	:stmtid		INTEGER			--input
	SQLDA					--output selects
	;
	DESCRIBE :stmtid SELECT LIST INTO SQLDA;

-- Gets input marker information on number and type.
-- Only marker statements set SQLD positive.
PROCEDURE	SQL__DESCRIBE_PARM
	SQLCODE
	:stmtid		INTEGER			--input
	SQLDA					--output markers
	;
	DESCRIBE :stmtid MARKERS INTO SQLDA;

-- Execute a non-SELECT statement.
-- Must have filled in markers from described parameters.
-- SELECT uses DECLARE CURSOR, OPEN CURSOR, FETCH, etc.
PROCEDURE	SQL__EXECUTE
	SQLCODE
	:stmtid		INTEGER			--input
	SQLDA					--input markers
	;
	EXECUTE :stmtid USING DESCRIPTOR SQLDA;

-- Execute a non-SELECT, non-marker statement.
PROCEDURE	SQL__IMMEDIATE
	SQLCODE
	:stmt_tx	CHAR BY DESCRIPTOR	--input
	;
	EXECUTE IMMEDIATE :stmt_tx;

-- Free the statement and all resources.
PROCEDURE	SQL__RELEASE
	SQLCODE
	:stmtid		INTEGER			--input
	;
	RELEASE :stmtid;

-- Keep the changes.
PROCEDURE	SQL__COMMIT
	SQLCODE
	;
	COMMIT WORK;

-- Do not change anything.
PROCEDURE	SQL__ROLLBACK
	SQLCODE
	;
	ROLLBACK WORK;

-- Detach from everything.
PROCEDURE	SQL__FINISH
	SQLCODE
	;
	DISCONNECT ALL;

--------------------------------------------------------
-- Declare a table cursor for reading
PROCEDURE	SQL__TABLE_READ
	SQLCODE
	:stmtid		INTEGER			--input
	:tablcu		CHAR BY DESCRIPTOR	--input
	;
	DECLARE :tablcu READ ONLY TABLE CURSOR FOR :stmtid;

-- Declare a table cursor for modification
PROCEDURE	SQL__TABLE_READ_WRITE
	SQLCODE
	:stmtid		INTEGER			--input
	:tablcu		CHAR BY DESCRIPTOR	--input
	;
	DECLARE :tablcu TABLE CURSOR FOR :stmtid;

-- Declare a table cursor for a new row
PROCEDURE	SQL__TABLE_WRITE
	SQLCODE
	:stmtid		INTEGER			--input
	:tablcu		CHAR BY DESCRIPTOR	--input
	;
	DECLARE :tablcu INSERT ONLY TABLE CURSOR FOR :stmtid;

-- Open the already declared cursor.
PROCEDURE	SQL__OPEN_CODE
	SQLCODE
	:tablcu		CHAR BY DESCRIPTOR	--input
	SQLDA					--input
	;
	OPEN :tablcu USING DESCRIPTOR SQLDA;

-- Get a row from opened cursor and write it to
-- addresses given in the descriptor.
PROCEDURE	SQL__FETCH
	SQLCODE
	:tablcu		CHAR BY DESCRIPTOR	--input
	SQLDA					--points output
	;
	FETCH :tablcu USING DESCRIPTOR SQLDA;

-- End the cursor, does not release the rows.
PROCEDURE	SQL__CLOSE
	SQLCODE
	:tablcu		CHAR BY DESCRIPTOR	--input
	;
	CLOSE :tablcu;

--------------------------------------------------------
-- Declare a list cursor for reading from column select statement.
PROCEDURE	SQL__LIST_READ
	SQLCODE
	:colu_id	INTEGER			--input
	:listcu		CHAR BY DESCRIPTOR	--input
	;
	DECLARE :listcu READ ONLY LIST CURSOR FOR :colu_id;

-- There is no UPDATE of segmented strings.
-- Declare a list cursor for insert.
PROCEDURE	SQL__LIST_WRITE
	SQLCODE
	:colu_id	INTEGER			--input
	:listcu		CHAR BY DESCRIPTOR	--input
	;
	DECLARE :listcu INSERT ONLY LIST CURSOR FOR :colu_id;

--------------------------------------------------------
--------------------------------------------------------
PROCEDURE	SQL__EXECUTE_CA
	SQLCA
	:stmtid		INTEGER			--input
	SQLDA					--input
	;
	EXECUTE :stmtid USING DESCRIPTOR SQLDA;

PROCEDURE	SQL__IMMEDIATE_CA
	SQLCA
	:stmt_tx	CHAR BY DESCRIPTOR	--input
	;
	EXECUTE IMMEDIATE :stmt_tx;

PROCEDURE	SQL__OPEN_CA
	SQLCA
	:tablcu		CHAR BY DESCRIPTOR	--input
	SQLDA					--input
	;
	OPEN :tablcu USING DESCRIPTOR SQLDA;

PROCEDURE	SQL__FETCH_CA
	SQLCA
	:tablcu		CHAR BY DESCRIPTOR	--input
	SQLDA					--points output
	;
	FETCH :tablcu USING DESCRIPTOR SQLDA;
