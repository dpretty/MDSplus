/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory 3.5.1 VMS.
 *
 */
module joerger_tr612
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("app_class", "BuilderProduct")
!(BX) bx_info("app_name", "builderProduct")
!(BX) bx_info("app_defaults", "APP-DEFAULTS.DAT")
!(BX) bx_info("c++_old_construct", "false")
!(BX) bx_info("c++_unmanage_dialogs", "true")
!(BX) bx_info("c++_gen_derived", "false")
!(BX) bx_info("c++_target", "MAIN-CXX.EXE")
!(BX) bx_info("c++_hdrext", "HXX")
!(BX) bx_info("c++_srcext", "CXX")
!(BX) bx_info("c++_callbacks", "CALLBACKS-CXX", true)
!(BX) bx_info("c++_utilities", "BXUTILS-CXX", true)
!(BX) bx_info("c++_constants", "DEFS-CXX", true)
!(BX) bx_info("c++_baseclass", "UIComponent", true)
!(BX) bx_info("c++_main", "MAIN-CXX", true)
!(BX) bx_info("c++_makefile", "MAKEFILE-CXX.MMS", true)
!(BX) bx_info("c++_imakefile", "MAKEFILE-CXX.COM", true)
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_target", "MAIN-C.EXE")
!(BX) bx_info("c_utilities", "BXUTILS-C.C", true)
!(BX) bx_info("c_constants", "CREATION-C.H", true)
!(BX) bx_info("c_callbacks", "CALLBACKS-C.C", true)
!(BX) bx_info("c_creation", "CREATION-C.C", true)
!(BX) bx_info("c_main", "MAIN-C.C", true)
!(BX) bx_info("c_makefile", "MAKEFILE-C.MMS", true)
!(BX) bx_info("c_imakefile", "MAKEFILE-C.COM", true)
!(BX) bx_info("uil_target", "MAIN-UIL.EXE")
!(BX) bx_info("uil_utilities", "BXUTILS-UIL.C", true)
!(BX) bx_info("uil_constants", "MAIN-UIL.H", true)
!(BX) bx_info("uil_callbacks", "CALLBACKS-UIL.C", true)
!(BX) bx_info("uil_uil", "TR612_NEW.UIL", true)
!(BX) bx_info("uil_main", "MAIN-UIL.C", true)
!(BX) bx_info("uil_makefile", "MAKEFILE-UIL.MMS", true)
!(BX) bx_info("uil_imakefile", "MAKEFILE-UIL.COM", true)
!(BX) bx_info("include_path", "[]", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("purify_command", "purify", false)
!(BX) bx_info("c++_libraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12.exe/s"&
!(BX)	"hare,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$xtlibshrr5."&
!(BX)	"exe/share,sys$share:decw$xlibshr.exe/share,sys$share:decc$shr.exe/sh"&
!(BX)	"are")
!(BX) bx_info("c++_flags", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("c++_cc", "CC")
!(BX) bx_info("system_directory", "BX$SYSTEM:")
!(BX) bx_info("builder_version", "Builder Xcessory 3.5.1 VMS")
!(BX) bx_info("uil", "uil")
!(BX) bx_info("cc", "cc")
!(BX) bx_info("cpp", "CC")
!(BX) bx_info("cOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("cOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12.ex"&
!(BX)	"e/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$xtlib"&
!(BX)	"shrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:decc$s"&
!(BX)	"hr.exe/share")
!(BX) bx_info("uilCOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("uilUILOutputIncludes", "/motif")
!(BX) bx_info("uilOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12."&
!(BX)	"exe/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$x"&
!(BX)	"tlibshrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:"&
!(BX)	"decc$shr.exe/share")
!(BX) bx_info("cppOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("cppOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12."&
!(BX)	"exe/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$x"&
!(BX)	"tlibshrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:"&
!(BX)	"decc$shr.exe/share")
!(BX) bx_info("builder_version", "Builder Xcessory 3.5.1 VMS")
!(BX) bx_info("ansi", "false")
!(BX) bx_info("use_locales", "false")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "true")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o")

value
    DEVICE_NID :  -1;
    DEVICE$N_NAME :  1;
    DEVICE$N_COMMENT :  2;
    DEVICE$N_ACTMEM :  3;
    DEVICE$N_PRETRIG :  4;
    DEVICE$N_MODE :  5;
    DEVICE$N_FREQUENCY :  6;
    DEVICE$N_EXT_CLOCK :  7;
    DEVICE$N_TRIGGER :  8;
    DEVICE$N_INPUTS :  9;
    DEVICE$K_NODES_PER_INP :  3;
    DEVICE$N_INP_HEAD :  0;
    DEVICE$N_INP_ENDIDX :  2;
    DEVICE$N_INP_STARTIDX :  1;
    DEVICE$N_INIT_ACTION :  27;
    DEVICE$N_STORE_ACTION :  28;

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};


!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        XmNx = 318;
!(BX)        XmNy = 306;
!(BX)        XmNwidth = 665;
!(BX)        XmNheight = 581;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFormDialog JOERGER_TR612;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object JOERGER_TR612 : XmFormDialog widget {
    arguments {
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNnoResize = true;
        XmNdialogTitle = compound_string("Joerger Model TR612/3 Six Channe" &
 "l Transient Recorder");
        XmNx = 369;
        XmNy = 194;
        XmNwidth = 665;
        XmNheight = 581;
    };
    controls {
         managed XmBulletinBoard bulletinBoard;
         managed XmForm bottomButtons;
         managed XmdsExprField commentField;
         managed XmLabelGadget commentLabel;
         managed XmdsExprField nameField;
         managed XmLabelGadget nameLabel;
    };
    callbacks {
    };
};

object nameLabel : XmLabelGadget widget {
    arguments {
        XmNlabelString = compound_string("CAMAC Name:");
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNtopOffset = 10;
        XmNleftOffset = 10;
    };
    controls {
    };
    callbacks {
    };
};

object nameField : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNdefaultQuote = true;
        XmNcolumns = 32;
        XmdsNputOnApply = true;
        XmdsNnidOffset = DEVICE$N_NAME;
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmdsNautoQuote = true;
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNtopOffset = 10;
        XmNleftOffset = 110;
    };
    controls {
    };
    callbacks {
    };
};

object commentLabel : XmLabelGadget widget {
    arguments {
        XmNlabelString = compound_string("Comment:");
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNtopOffset = 40;
        XmNleftOffset = 10;
    };
    controls {
    };
    callbacks {
    };
};

object commentField : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNdefaultQuote = true;
        XmNcolumns = 32;
        XmdsNputOnApply = true;
        XmdsNnidOffset = DEVICE$N_COMMENT;
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmdsNautoQuote = true;
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNtopOffset = 40;
        XmNleftOffset = 110;
    };
    controls {
    };
    callbacks {
    };
};

object bottomButtons : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_NONE;
        XmNtopAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNbottomOffset = 5;
        XmNleftOffset = 5;
        XmNrightOffset = 5;
    };
    controls {
         managed XmdsXdBoxOnOffButton storeAction;
         managed XmdsXdBoxOnOffButton initAction;
         managed XmForm deviceButtons;
    };
    callbacks {
    };
};

object deviceButtons : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_NONE;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopWidget = XmdsXdBoxOnOffButton initAction;
        XmNtopOffset = 15;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNy = 50;
    };
    controls {
         managed XmdsCancelButton cancelButton;
         managed XmdsResetButton resetButton;
         managed XmdsApplyButton applyButton;
         managed XmdsOkButton okButton;
    };
    callbacks {
    };
};

object okButton : XmdsOkButton widget {
    arguments {
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
    };
    controls {
    };
    callbacks {
    };
};

object applyButton : XmdsApplyButton widget {
    arguments {
        XmNleftAttachment = XmATTACH_POSITION;
        XmNleftPosition = 33;
        XmNleftOffset = -25;
    };
    controls {
    };
    callbacks {
    };
};

object resetButton : XmdsResetButton widget {
    arguments {
        XmNleftAttachment = XmATTACH_POSITION;
        XmNleftPosition = 66;
        XmNleftOffset = -25;
    };
    controls {
    };
    callbacks {
    };
};

object cancelButton : XmdsCancelButton widget {
    arguments {
        XmNrightAttachment = XmATTACH_FORM;
        XmNrightOffset = 10;
    };
    controls {
    };
    callbacks {
    };
};

object initAction : XmdsXdBoxOnOffButton widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNlabelString = compound_string("Initialization Action");
        XmdsNnidOffset = DEVICE$N_INIT_ACTION;
    };
    controls {
    };
    callbacks {
    };
};

object storeAction : XmdsXdBoxOnOffButton widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNlabelString = compound_string("Store Action");
        XmdsNnidOffset = DEVICE$N_STORE_ACTION;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmdsXdBoxOnOffButton initAction;
        XmNleftOffset = 20;
    };
    controls {
    };
    callbacks {
    };
};

object bulletinBoard : XmBulletinBoard widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNtopAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopOffset = 70;
        XmNbottomOffset = 80;
        XmNleftOffset = 5;
        XmNrightOffset = 5;
    };
    controls {
         managed XmdsExprField ext_clock;
         managed XmLabel label1;
         managed XmdsExprField trigger;
         managed XmLabel label;
         managed XmdsNidOptionMenu mode;
         managed XmdsNidOptionMenu frequency;
         managed XmdsNidOptionMenu actmem;
         managed XmdsNidOptionMenu pretrig;
         managed XmdsDigChans digChans;
    };
    callbacks {
    };
};

object digChans : XmdsDigChans widget {
    arguments {
        XmdsNnodesPerChannel = DEVICE$K_NODES_PER_INP;
        XmdsNnid = DEVICE_NID;
        XmdsNchannels = 6;
        XmdsNendIdxNidOffset = DEVICE$N_INP_ENDIDX;
        XmdsNstartIdxNidOffset = DEVICE$N_INP_STARTIDX;
        XmdsNdataNidOffset = DEVICE$N_INP_HEAD;
        XmdsNnidOffset = DEVICE$N_INPUTS;
        XmNx = 20;
        XmNy = 160;
        XmNwidth = 630;
        XmNheight = 250;
    };
    controls {
    };
    callbacks {
    };
};

object pretrig : XmdsNidOptionMenu widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNvalueStrings = string_table(
	compound_string("0"),
	compound_string("1"),
	compound_string("2"),
	compound_string("3"),
	compound_string("4"),
	compound_string("5"),
	compound_string("6"),
	compound_string("7 "));
        XmNlabelString = compound_string("Pre-trigger samples:");
        XmdsNputOnApply = true;
        XmdsNnidOffset = DEVICE$N_PRETRIG;
        XmdsNlabelStrings = string_table(
	compound_string("0/8 "),
	compound_string("1/8 "),
	compound_string("2/8 "),
	compound_string("3/8 "),
	compound_string("4/8"),
	compound_string("5/8"),
	compound_string("6/8"),
	compound_string("7/8 "));
        XmNx = 20;
        XmNy = 10;
    };
    controls {
    };
    callbacks {
    };
};

object actmem : XmdsNidOptionMenu widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNvalueStrings = string_table(
	compound_string("0"),
	compound_string("1"),
	compound_string("2"),
	compound_string("3"),
	compound_string("4"),
	compound_string("5"),
	compound_string("6"),
	compound_string("7"));
        XmNlabelString = compound_string("Active memory:        ");
        XmdsNputOnApply = true;
        XmdsNnidOffset = DEVICE$N_ACTMEM;
        XmdsNlabelStrings = string_table(
	compound_string("1/8"),
	compound_string("2/8"),
	compound_string("3/8"),
	compound_string("4/8"),
	compound_string("5/8"),
	compound_string("6/8"),
	compound_string("7/8"),
	compound_string("8/8"));
        XmNx = 20;
        XmNy = 50;
    };
    controls {
    };
    callbacks {
    };
};

object frequency : XmdsNidOptionMenu widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNvalueStrings = string_table(
	compound_string("0"),
	compound_string("1"),
	compound_string("2"),
	compound_string("3"),
	compound_string("4"));
        XmNlabelString = compound_string("Frequency:             ");
        XmdsNputOnApply = true;
        XmdsNnidOffset = DEVICE$N_FREQUENCY;
        XmdsNlabelStrings = string_table(
	compound_string("3MHz"),
	compound_string("2MHz"),
	compound_string("1MHz"),
	compound_string("100KHz"),
	compound_string("External"));
        XmNx = 30;
        XmNy = 90;
    };
    controls {
    };
    callbacks {
    };
};

object mode : XmdsNidOptionMenu widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNvalueStrings = string_table(
	compound_string("1 "),
	compound_string("2 "),
	compound_string("4 "),
	compound_string("8 "),
	compound_string("16 "));
        XmNlabelString = compound_string("Mode:        ");
        XmdsNputOnApply = true;
        XmdsNnidOffset = DEVICE$N_MODE;
        XmdsNlabelStrings = string_table(
	compound_string("Normal"),
	compound_string("Burst"));
        XmNx = 300;
        XmNy = 50;
    };
    controls {
    };
    callbacks {
    };
};

object label : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Trigger:");
        XmNx = 300;
        XmNy = 20;
    };
    controls {
    };
    callbacks {
    };
};

object trigger : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNcolumns = 32;
        XmdsNputOnApply = true;
        XmdsNnidOffset = DEVICE$N_TRIGGER;
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmNx = 380;
        XmNy = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label1 : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Ext Clock:");
        XmNx = 300;
        XmNy = 100;
    };
    controls {
    };
    callbacks {
    };
};

object ext_clock : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNcolumns = 32;
        XmdsNputOnApply = true;
        XmdsNnidOffset = DEVICE$N_EXT_CLOCK;
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmNx = 380;
        XmNy = 100;
    };
    controls {
    };
    callbacks {
    };
};
end module;
