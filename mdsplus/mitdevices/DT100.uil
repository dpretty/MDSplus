/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory 3.5.1 VMS.
 *
 */
module MAIN_UIL
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("app_class", "BuilderProduct")
!(BX) bx_info("app_name", "builderProduct")
!(BX) bx_info("app_defaults", "APP-DEFAULTS.DAT")
!(BX) bx_info("c++_old_construct", "false")
!(BX) bx_info("c++_unmanage_dialogs", "true")
!(BX) bx_info("c++_gen_derived", "true")
!(BX) bx_info("c++_target", "MAIN-CXX.EXE")
!(BX) bx_info("c++_hdrext", "HXX")
!(BX) bx_info("c++_srcext", "CXX")
!(BX) bx_info("c++_callbacks", "CALLBACKS-CXX", true)
!(BX) bx_info("c++_utilities", "BXUTILS-CXX", true)
!(BX) bx_info("c++_constants", "DEFS-CXX", true)
!(BX) bx_info("c++_baseclass", "UIComponent", true)
!(BX) bx_info("c++_main", "MAIN-CXX", true)
!(BX) bx_info("c++_makefile", "MAKEFILE-CXX.MMS", true)
!(BX) bx_info("c++_imakefile", "MAKEFILE-CXX.COM", true)
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_target", "MAIN-C.EXE")
!(BX) bx_info("c_utilities", "BXUTILS-C.C", true)
!(BX) bx_info("c_constants", "CREATION-C.H", true)
!(BX) bx_info("c_callbacks", "CALLBACKS-C.C", true)
!(BX) bx_info("c_creation", "CREATION-C.C", true)
!(BX) bx_info("c_main", "MAIN-C.C", true)
!(BX) bx_info("c_makefile", "MAKEFILE-C.MMS", true)
!(BX) bx_info("c_imakefile", "MAKEFILE-C.COM", true)
!(BX) bx_info("uil_target", "MAIN-UIL.EXE")
!(BX) bx_info("uil_utilities", "BXUTILS-UIL.C", true)
!(BX) bx_info("uil_constants", "MAIN-UIL.H", true)
!(BX) bx_info("uil_callbacks", "CALLBACKS-UIL.C", true)
!(BX) bx_info("uil_uil", "T.UIL", true)
!(BX) bx_info("uil_main", "MAIN-UIL.C", true)
!(BX) bx_info("uil_makefile", "MAKEFILE-UIL.MMS", true)
!(BX) bx_info("uil_imakefile", "MAKEFILE-UIL.COM", true)
!(BX) bx_info("include_path", "[]", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("c++_libraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12.exe/s"&
!(BX)	"hare,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$xtlibshrr5."&
!(BX)	"exe/share,sys$share:decw$xlibshr.exe/share,sys$share:decc$shr.exe/sh"&
!(BX)	"are")
!(BX) bx_info("c++_flags", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("c++_cc", "CC")
!(BX) bx_info("system_directory", "BX$SYSTEM:")
!(BX) bx_info("builder_version", "Builder Xcessory 3.5.1 VMS")
!(BX) bx_info("uil", "uil")
!(BX) bx_info("cc", "cc")
!(BX) bx_info("cpp", "CC")
!(BX) bx_info("cOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("cOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12.ex"&
!(BX)	"e/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$xtlib"&
!(BX)	"shrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:decc$s"&
!(BX)	"hr.exe/share")
!(BX) bx_info("uilCOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("uilUILOutputIncludes", "/motif")
!(BX) bx_info("uilOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12."&
!(BX)	"exe/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$x"&
!(BX)	"tlibshrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:"&
!(BX)	"decc$shr.exe/share")
!(BX) bx_info("cppOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("cppOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12."&
!(BX)	"exe/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$x"&
!(BX)	"tlibshrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:"&
!(BX)	"decc$shr.exe/share")
!(BX) bx_info("builder_version", "Builder Xcessory 3.5.1 VMS")
!(BX) bx_info("ansi", "false")
!(BX) bx_info("use_locales", "false")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "true")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o")

value
    DEVICE_NID :  -1;
    DEVICE$N_NAME :  1;
    DEVICE$N_COMMENT :  2;
    DEVICE$N_INIT_ACTION :  0;
    DEVICE$N_STORE_ACTION :  0;
    DEVICE$K_NODES_PER_INP :  3;
    DEVICE$N_INP_HEAD :  0;
    DEVICE$N_INP_ENDIDX :  2;
    DEVICE$N_INP_STARTIDX :  1;
    DEVICE$N_INPUTS :  12;
    DT100$N_INP_HEAD :  0;
    DT100$N_INP_ENDIDX :  2;
    DT100$K_NODES_PER_INP :  3;
    DT100$N_INP_STARTIDX :  1;
    DT100$N_NODE :  1;
    DT100$N_BOARD :  2;
    DT100$N_COMMENT :  3;
    DT100$N_EXT_CLOCK_IN :  4;
    DT100$N_STOP_TRIG :  5;
    DT100$N_MEM_SIZE :  6;
    DT100$N_ACTIVE_CHANS :  7;
    DT100$N_MAX_SAMPLES :  8;
    DT100$N_MODE :  9;
    DT100$N_INPUTS :  10;
    DT100$N_INIT_ACTION :  106;
    DT100$N_STORE_ACTION :  107;
procedure AddListTree();
procedure TurnOnOff(integer);
procedure DisplayData();
procedure DisplayNci();
procedure ModifyData();
procedure SetupDevice();
procedure MenuUnmap();
procedure MTurnOnOff(integer);
procedure MSetupDevice();
procedure MDisplayData();
procedure MDisplayNci();
procedure MModifyData();
procedure CloseTree();
procedure OpenTree();

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};


!(BX)object dialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 727;
!(BX)        XmNy = 241;
!(BX)        XmNwidth = 589;
!(BX)        XmNheight = 428;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog DT100;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object DT100 : XmBulletinBoardDialog widget {
    arguments {
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNnoResize = true;
        XmNdialogTitle = compound_string("Dt100 32 Channel PCI based Trans" &
 "ient Recorder (ACQ32)");
        XmNx = 727;
        XmNy = 241;
    };
    controls {
         managed XmdsNidOptionMenu nidOptionMenu1;
         managed XmLabelGadget labelGadget3;
         managed XmdsNidOptionMenu nidOptionMenu;
         managed XmLabelGadget labelGadget;
         managed XmLabelGadget labelGadget1;
         managed XmdsExprField dsExprField;
         managed XmdsExprField dsExprField1;
         managed XmdsDigChans dsDigChans;
         managed XmdsXdBoxOnOffButton dsXdBoxOnOffButton;
         managed XmdsXdBoxOnOffButton dsXdBoxOnOffButton1;
         managed XmdsNidOptionMenu dsNidOptionMenu;
         managed XmdsExprField dsExprField2;
         managed XmLabelGadget labelGadget2;
         managed XmdsExprField dsExprField3;
         managed XmdsCancelButton dsCancelButton;
         managed XmdsResetButton dsResetButton;
         managed XmdsOkButton dsOkButton;
         managed XmdsApplyButton dsApplyButton;
         managed XmdsExprField dsExprField4;
         managed XmLabelGadget labelGadget4;
    };
    callbacks {
    };
};

object labelGadget4 : XmLabelGadget widget {
    arguments {
        XmNlabelString = compound_string("Samples/channel (K)");
        XmNx = 230;
        XmNy = 80;
    };
    controls {
    };
    callbacks {
    };
};

object dsExprField4 : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNcolumns = 20;
        XmdsNnidOffset = DT100$N_MAX_SAMPLES;
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmNx = 360;
        XmNy = 80;
    };
    controls {
    };
    callbacks {
    };
};

object dsApplyButton : XmdsApplyButton widget {
    arguments {
        XmNx = 133;
        XmNy = 380;
    };
    controls {
    };
    callbacks {
    };
};

object dsOkButton : XmdsOkButton widget {
    arguments {
        XmNx = 10;
        XmNy = 380;
    };
    controls {
    };
    callbacks {
    };
};

object dsResetButton : XmdsResetButton widget {
    arguments {
        XmNx = 308;
        XmNy = 380;
    };
    controls {
    };
    callbacks {
    };
};

object dsCancelButton : XmdsCancelButton widget {
    arguments {
        XmNx = 508;
        XmNy = 380;
    };
    controls {
    };
    callbacks {
    };
};

object dsExprField3 : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNcolumns = 20;
        XmdsNnidOffset = DT100$N_STOP_TRIG;
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmNx = 80;
        XmNy = 110;
    };
    controls {
    };
    callbacks {
    };
};

object labelGadget2 : XmLabelGadget widget {
    arguments {
        XmNlabelString = compound_string("External Clock:");
        XmNx = 230;
        XmNy = 110;
    };
    controls {
    };
    callbacks {
    };
};

object dsExprField2 : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNcolumns = 20;
        XmdsNnidOffset = DT100$N_EXT_CLOCK_IN;
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmNx = 360;
        XmNy = 110;
    };
    controls {
    };
    callbacks {
    };
};

object dsNidOptionMenu : XmdsNidOptionMenu widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNvalueStrings = string_table(
	compound_string("2 "),
	compound_string("4 "),
	compound_string("6"),
	compound_string("8"),
	compound_string("10"),
	compound_string("12"),
	compound_string("14"),
	compound_string("16"),
	compound_string("18"),
	compound_string("20"),
	compound_string("22"),
	compound_string("24"),
	compound_string("26"),
	compound_string("28"),
	compound_string("30"),
	compound_string("32"));
        XmNlabelString = compound_string("Active Channels:");
        XmdsNputOnApply = true;
        XmdsNnidOffset = DT100$N_ACTIVE_CHANS;
        XmdsNlabelStrings = string_table(
	compound_string("2 "),
	compound_string("4 "),
	compound_string("6"),
	compound_string("8"),
	compound_string("10"),
	compound_string("12"),
	compound_string("14"),
	compound_string("16"),
	compound_string("18"),
	compound_string("20"),
	compound_string("22"),
	compound_string("24"),
	compound_string("26"),
	compound_string("28"),
	compound_string("30"),
	compound_string("32"));
        XmNx = 10;
        XmNy = 70;
    };
    controls {
    };
    callbacks {
    };
};

object dsXdBoxOnOffButton1 : XmdsXdBoxOnOffButton widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNlabelString = compound_string("Store Action");
        XmdsNnidOffset = DT100$N_STORE_ACTION;
        XmNx = 220;
        XmNy = 340;
        XmNwidth = 115;
        XmNheight = 31;
    };
    controls {
    };
    callbacks {
    };
};

object dsXdBoxOnOffButton : XmdsXdBoxOnOffButton widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmNlabelString = compound_string("Initialization Action");
        XmdsNnidOffset = DT100$N_INIT_ACTION;
        XmNx = 20;
        XmNy = 340;
        XmNwidth = 169;
        XmNheight = 31;
    };
    controls {
    };
    callbacks {
    };
};

object dsDigChans : XmdsDigChans widget {
    arguments {
        XmdsNnodesPerChannel = DT100$K_NODES_PER_INP;
        XmdsNnid = DEVICE_NID;
        XmdsNchannels = 32;
        XmdsNendIdxNidOffset = DT100$N_INP_ENDIDX;
        XmdsNstartIdxNidOffset = DT100$N_INP_STARTIDX;
        XmdsNdataNidOffset = DT100$N_INP_HEAD;
        XmdsNnidOffset = DT100$N_INPUTS;
        XmNx = 20;
        XmNy = 150;
        XmNwidth = 558;
    };
    controls {
    };
    callbacks {
    };
};

object dsExprField1 : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNdefaultQuote = true;
        XmNcolumns = 32;
        XmdsNnidOffset = DT100$N_COMMENT;
        XmNmarginHeight = 1;
        XmdsNautoQuote = true;
        XmNx = 111;
        XmNy = 40;
    };
    controls {
    };
    callbacks {
    };
};

object dsExprField : XmdsExprField widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNdefaultQuote = true;
        XmNcolumns = 32;
        XmdsNnidOffset = DT100$N_NODE;
        XmNmarginHeight = 1;
        XmdsNautoQuote = true;
        XmNx = 110;
        XmNy = 10;
    };
    controls {
    };
    callbacks {
    };
};

object labelGadget1 : XmLabelGadget widget {
    arguments {
        XmNlabelString = compound_string("Comment:");
        XmNx = 10;
        XmNy = 40;
    };
    controls {
    };
    callbacks {
    };
};

object labelGadget : XmLabelGadget widget {
    arguments {
        XmNlabelString = compound_string("Node Name:");
        XmNx = 11;
        XmNy = 10;
    };
    controls {
    };
    callbacks {
    };
};

object nidOptionMenu : XmdsNidOptionMenu widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNvalueStrings = string_table(
	compound_string("1"),
	compound_string("2"),
	compound_string("3"),
	compound_string("4"),
	compound_string("5"),
	compound_string("6"),
	compound_string("7"),
	compound_string("8"));
        XmNlabelString = compound_string("Board Number:");
        XmdsNputOnApply = true;
        XmdsNnidOffset = DT100$N_BOARD;
        XmdsNlabelStrings = string_table(
	compound_string("1"),
	compound_string("2"),
	compound_string("3"),
	compound_string("4"),
	compound_string("5"),
	compound_string("6"),
	compound_string("7"),
	compound_string("8"));
        XmNx = 390;
        XmNy = 10;
    };
    controls {
    };
    callbacks {
    };
};

object labelGadget3 : XmLabelGadget widget {
    arguments {
        XmNlabelString = compound_string("Trigger:");
        XmNx = 20;
        XmNy = 110;
    };
    controls {
    };
    callbacks {
    };
};

object nidOptionMenu1 : XmdsNidOptionMenu widget {
    arguments {
        XmdsNnid = DEVICE_NID;
        XmdsNvalueStrings = string_table(
	compound_string("0"),
	compound_string("1"),
	compound_string("2"));
        XmNlabelString = compound_string("Mode:");
        XmdsNputOnApply = true;
        XmdsNnidOffset = DT100$N_MODE;
        XmdsNlabelStrings = string_table(
	compound_string("Soft Transient"),
	compound_string(" Gated Transient"),
	compound_string(" Gated Continous"));
        XmNx = 390;
        XmNy = 40;
    };
    controls {
    };
    callbacks {
    };
};
end module;
